FROM golang:1.22.7-alpine3.20 AS src

RUN apk add --no-cache make gcc musl-dev linux-headers git jq bash just

COPY ./go.mod /app/go.mod
COPY ./go.sum /app/go.sum

WORKDIR /app

RUN echo "go mod cache: $(go env GOMODCACHE)"
RUN echo "go build cache: $(go env GOCACHE)"

RUN --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build go mod download

COPY . /app

# we need a separate stage for src so we can build a service provides prestates for unnanounced chains
FROM src AS builder
# We avoid copying the full .git dir into the build for just some metadata.
# Instead, specify:
# --build-arg GIT_COMMIT=$(git rev-parse HEAD)
# --build-arg GIT_DATE=$(git show -s --format='%ct')
ARG GIT_COMMIT
ARG GIT_DATE

ARG CANNON_VERSION=v0.0.0
ARG OP_PROGRAM_VERSION=v0.0.0

ARG TARGETOS TARGETARCH

WORKDIR /app
RUN --mount=type=cache,target=/go/pkg/mod --mount=type=cache,target=/root/.cache/go-build just \
        -d /app/op-program \
        -f /app/op-program/repro.justfile \
        GOOS="$TARGETOS" \
        GOARCH="$TARGETARCH" \
        GIT_COMMIT="$GIT_COMMIT" \
        GIT_DATE="$GIT_DATE" \
        CANNON_VERSION="$CANNON_VERSION" \
        OP_PROGRAM_VERSION="$OP_PROGRAM_VERSION" \
        build-all

# Exports files to the specified output location.
# Writing files to host requires buildkit to be enabled.
# e.g. `BUILDKIT=1 docker build ...`
FROM scratch AS export-stage
COPY --from=builder /app/op-program/bin/op-program-client.elf .
COPY --from=builder /app/op-program/bin/op-program-client64.elf .
COPY --from=builder /app/op-program/bin/meta.json .
COPY --from=builder /app/op-program/bin/prestate.bin.gz .
COPY --from=builder /app/op-program/bin/prestate-proof.json .
COPY --from=builder /app/op-program/bin/meta-mt64.json .
COPY --from=builder /app/op-program/bin/prestate-mt64.bin.gz .
COPY --from=builder /app/op-program/bin/prestate-proof-mt64.json .
COPY --from=builder /app/op-program/bin/meta-interop.json .
COPY --from=builder /app/op-program/bin/prestate-interop.bin.gz .
COPY --from=builder /app/op-program/bin/prestate-proof-interop.json .
