// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// PreimageOracleMetaData contains all meta data concerning the PreimageOracle contract.
var PreimageOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"localContext\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"word\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partOffset\",\"type\":\"uint256\"}],\"name\":\"testFuzz_loadLocalData_varyingLength_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"testFuzz_readPreimage_missingPreimage_reverts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_keccak256PreimageKey_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_loadKeccak256PreimagePart_outOfBoundsOffset_reverts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_loadKeccak256PreimagePart_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_loadLocalData_multipleContexts_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_loadLocalData_onePart_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_loadLocalData_outOfBoundsOffset_reverts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260008054600160ff19918216811790925560048054909116909117905534801561002d57600080fd5b50612e2e8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063916a17c6116100cd578063bf5a157311610081578063f87ee92811610066578063f87ee9281461022e578063f971dc0414610236578063fa7626d41461023e57600080fd5b8063bf5a157314610213578063e20c9f711461022657600080fd5b8063a41b1c71116100b2578063a41b1c71146101eb578063b5508aa9146101f3578063ba414fa6146101fb57600080fd5b8063916a17c6146101d0578063971333db146101d857600080fd5b80633f7286f4116101245780635940498411610109578063594049841461019e57806366d9a9a0146101a657806385226c81146101bb57600080fd5b80633f7286f41461018e57806358d4c89d1461019657600080fd5b80630a9254e4146101565780630bb6f67b146101605780631ed7831c146101685780633e5e3c2314610186575b600080fd5b61015e61024b565b005b61015e61036c565b6101706103d1565b60405161017d919061221c565b60405180910390f35b610170610440565b6101706104ad565b61015e61051a565b61015e61080f565b6101ae610b0a565b60405161017d9190612276565b6101c3610c1b565b60405161017d91906123e2565b6101ae610ceb565b61015e6101e6366004612462565b610df3565b61015e61109d565b6101c3611206565b6102036112d6565b604051901515815260200161017d565b61015e61022136600461249d565b611436565b61017061157a565b61015e6115e7565b61015e611758565b6000546102039060ff1681565b6040516102579061220f565b604051809103906000f080158015610273573d6000803e3d6000fd5b50601b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169182179055604080517fc657c71800000000000000000000000000000000000000000000000000000000815260048101929092526024820152600e60448201527f507265696d6167654f7261636c650000000000000000000000000000000000006064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b50505050565b60408051808201909152600481527fdeadbeef0000000000000000000000000000000000000000000000000000000060208201527f02fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1806103cc8180611a90565b505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561043657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161040b575b5050505050905090565b6060600f8054806020026020016040519081016040528092919081815260200182805480156104365760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161040b575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156104365760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161040b575050505050905090565b60408051808201825260048082527fdeadbeef000000000000000000000000000000000000000000000000000000006020830152601b5492517fe159261100000000000000000000000000000000000000000000000000000000815291927f02fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f19260009273ffffffffffffffffffffffffffffffffffffffff9092169163e1592611916105ca9185918891016124bf565b600060405180830381600087803b1580156105e457600080fd5b505af11580156105f8573d6000803e3d6000fd5b5050601b546040517f61238bde00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526000935073ffffffffffffffffffffffffffffffffffffffff90911691506361238bde90604401602060405180830381865afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069991906124e0565b90507804deadbeef00000000000000000000000000000000000000006106bf8282611a90565b601b546040517ffef2b4ed0000000000000000000000000000000000000000000000000000000081526004810186905260009173ffffffffffffffffffffffffffffffffffffffff169063fef2b4ed90602401602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906124e0565b9050610760818751611b9e565b601b546040517f8542cf50000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260009173ffffffffffffffffffffffffffffffffffffffff1690638542cf5090604401602060405180830381865afa1580156107d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fb91906124f9565b905061080681611c98565b50505050505050565b601b546040517fc0c220c9000000000000000000000000000000000000000000000000000000008152600160048083018290526000602484018190527fdeadbeef000000000000000000000000000000000000000000000000000000006044850181905260648501839052608485018290529294929391929091829173ffffffffffffffffffffffffffffffffffffffff169063c0c220c99060a4016020604051808303816000875af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee91906124e0565b601b546040517f8542cf500000000000000000000000000000000000000000000000000000000081526004810183905260ff8516602482015291925060009173ffffffffffffffffffffffffffffffffffffffff90911690638542cf5090604401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906124f9565b905061099b81611c98565b601b546040517f61238bde0000000000000000000000000000000000000000000000000000000081526004810184905260ff851660248201527804deadbeef000000000000000000000000000000000000000091610a5d9173ffffffffffffffffffffffffffffffffffffffff909116906361238bde906044015b602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5791906124e0565b82611a90565b601b546040517ffef2b4ed0000000000000000000000000000000000000000000000000000000081526004810185905260009173ffffffffffffffffffffffffffffffffffffffff169063fef2b4ed90602401602060405180830381865afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af191906124e0565b9050610b00818760ff16611b9e565b5050505050505050565b60606012805480602002602001604051908101604052809291908181526020016000905b82821015610c1257600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610bfa57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610ba75790505b50505050508152505081526020019060010190610b2e565b50505050905090565b60606011805480602002602001604051908101604052809291908181526020016000905b82821015610c12578382906000526020600020018054610c5e9061251b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8a9061251b565b8015610cd75780601f10610cac57610100808354040283529160200191610cd7565b820191906000526020600020905b815481529060010190602001808311610cba57829003601f168201915b505050505081526020019060010190610c3f565b60606013805480602002602001604051908101604052809291908181526020016000905b82821015610c1257600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610ddb57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610d885790505b50505050508152505081526020019060010190610d0f565b610e008260006020611d0f565b9150610e18816000610e1385600861259d565b611d0f565b601b546040517fc0c220c900000000000000000000000000000000000000000000000000000000815260048101889052602481018790526044810186905260ff80861660648301528316608482015291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063c0c220c99060a4016020604051808303816000875af1158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed291906124e0565b601b546040517f8542cf50000000000000000000000000000000000000000000000000000000008152600481018390526024810185905291925060009173ffffffffffffffffffffffffffffffffffffffff90911690638542cf5090604401602060405180830381865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7291906124f9565b9050610f7d81611c98565b6000602081905260c085901b905260088590528251601b546040517f61238bde0000000000000000000000000000000000000000000000000000000081526004810185905260248101869052610ff29173ffffffffffffffffffffffffffffffffffffffff16906361238bde90604401610a16565b601b546040517ffef2b4ed0000000000000000000000000000000000000000000000000000000081526004810185905260009173ffffffffffffffffffffffffffffffffffffffff169063fef2b4ed90602401602060405180830381865afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906124e0565b90506110928187611b9e565b505050505050505050565b63deadbeef60006110b0602060096125b5565b6040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527ffe25498700000000000000000000000000000000000000000000000000000000600482015260ff919091169150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b15801561113d57600080fd5b505af1158015611151573d6000803e3d6000fd5b5050601b546040517fc0c220c9000000000000000000000000000000000000000000000000000000008152600160048201526000602482015260448101869052602060648201526084810185905273ffffffffffffffffffffffffffffffffffffffff909116925063c0c220c9915060a4016020604051808303816000875af11580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc91906124e0565b60606010805480602002602001604051908101604052809291908181526020016000905b82821015610c125783829060005260206000200180546112499061251b565b80601f01602080910402602001604051908101604052809291908181526020018280546112759061251b565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b50505050508152602001906001019061122a565b60008054610100900460ff16156112f65750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156114315760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000008284015282518083038401815260608301909352600092909161139b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016125da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526113d391612622565b6000604051808303816000865af19150503d8060008114611410576040519150601f19603f3d011682016040523d82523d6000602084013e611415565b606091505b509150508080602001905181019061142d91906124f9565b9150505b919050565b6040517ff28dceb300000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d7573742065786973740000000000000000000000006044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb390606401600060405180830381600087803b1580156114c957600080fd5b505af11580156114dd573d6000803e3d6000fd5b5050601b546040517fe03110e1000000000000000000000000000000000000000000000000000000008152600481018690526024810185905273ffffffffffffffffffffffffffffffffffffffff909116925063e03110e191506044016040805180830381865afa158015611556573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610366919061263e565b6060600c8054806020026020016040519081016040528092919081815260200182805480156104365760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161040b575050505050905090565b6040805180820190915260048082527fdeadbeef00000000000000000000000000000000000000000000000000000000602083015260009061162a90600961259d565b6040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527ffe254987000000000000000000000000000000000000000000000000000000006004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b1580156116b257600080fd5b505af11580156116c6573d6000803e3d6000fd5b5050601b546040517fe159261100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116925063e1592611915061172290849086906004016124bf565b600060405180830381600087803b15801561173c57600080fd5b505af1158015611750573d6000803e3d6000fd5b505050505050565b604080518082019091527fdeadbeef0000000000000000000000000000000000000000000000000000000081527fbeefbabe000000000000000000000000000000000000000000000000000000006020820152600190600490600090815b6002811015611a8957601b5460009073ffffffffffffffffffffffffffffffffffffffff1663c0c220c987848681600281106117f4576117f4612662565b60200201516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260ff80891660648301528716608482015260a4016020604051808303816000875af115801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906124e0565b601b546040517f8542cf500000000000000000000000000000000000000000000000000000000081526004810183905260ff8716602482015291925060009173ffffffffffffffffffffffffffffffffffffffff90911690638542cf5090604401602060405180830381865afa15801561190f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193391906124f9565b905061193e81611c98565b600060c08760ff16901b604086866002811061195c5761195c612662565b6020020151601b546040517f61238bde0000000000000000000000000000000000000000000000000000000081526004810188905260ff8b1660248201529190921c9290921792506119cf9173ffffffffffffffffffffffffffffffffffffffff909116906361238bde90604401610a16565b601b546040517ffef2b4ed0000000000000000000000000000000000000000000000000000000081526004810185905260009173ffffffffffffffffffffffffffffffffffffffff169063fef2b4ed90602401602060405180830381865afa158015611a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6391906124e0565b9050611a72818960ff16611b9e565b505050508080611a8190612691565b9150506117b6565b5050505050565b808214611b9a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611b1c9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201527f657333325d000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9982604051611b5391906126c9565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9981604051611b8a9190612714565b60405180910390a1611b9a611d64565b5050565b808214611b9a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611c2a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e60408201527f745d000000000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051611c6191906126c9565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051611b8a9190612714565b80611d0c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611cfc9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1611d0c611d64565b50565b6000611d1c848484611ee0565b9050611d5d6040518060400160405280600c81526020017f426f756e6420526573756c7400000000000000000000000000000000000000008152508261211c565b9392505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15611eb25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e3392916020016125da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e6b91612622565b6000604051808303816000865af19150503d8060008114611ea8576040519150601f19603f3d011682016040523d82523d6000602084013e611ead565b606091505b505050505b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b600081831115611f76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b828410158015611f865750818411155b15611f92575082611d5d565b6000611f9e8484612751565b611fa990600161259d565b905060038511158015611fbb57508481115b15611fd257611fca858561259d565b915050611d5d565b611ffd60037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612751565b85101580156120345750612031857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612751565b81115b1561206d57612063857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612751565b611fca9084612751565b828511156120c35760006120818487612751565b9050600061208f8383612768565b9050806000036120a457849350505050611d5d565b60016120b0828861259d565b6120ba9190612751565b93505050612114565b838510156121145760006120d78686612751565b905060006120e58383612768565b9050806000036120fa57859350505050611d5d565b6121048186612751565b61210f90600161259d565b935050505b509392505050565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff1683836040516024016121539291906127a3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052516121d49190612622565b600060405180830381855afa9150503d8060008114611750576040519150601f19603f3d011682016040523d82523d6000602084013e611750565b61065c806127c683390190565b6020808252825182820181905260009190848201906040850190845b8181101561226a57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612238565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561235d578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805173ffffffffffffffffffffffffffffffffffffffff168552880151888501889052805188860181905290890190839060608701905b808310156123485783517fffffffff00000000000000000000000000000000000000000000000000000000168252928b019260019290920191908b0190612306565b50978a0197955050509187019160010161229e565b50919998505050505050505050565b60005b8381101561238757818101518382015260200161236f565b838111156103665750506000910152565b600081518084526123b081602086016020860161236c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612455577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612443858351612398565b94509285019290850190600101612409565b5092979650505050505050565b600080600080600060a0868803121561247a57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080604083850312156124b057600080fd5b50508035926020909101359150565b8281526040602082015260006124d86040830184612398565b949350505050565b6000602082840312156124f257600080fd5b5051919050565b60006020828403121561250b57600080fd5b81518015158114611d5d57600080fd5b600181811c9082168061252f57607f821691505b602082108103612568577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156125b0576125b061256e565b500190565b600060ff821660ff84168060ff038211156125d2576125d261256e565b019392505050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161261481600485016020870161236c565b919091016004019392505050565b6000825161263481846020870161236c565b9190910192915050565b6000806040838503121561265157600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126c2576126c261256e565b5060010190565b60408152600061270660408301600a81527f2020202020204c65667400000000000000000000000000000000000000000000602082015260400190565b905082602083015292915050565b60408152600061270660408301600a81527f2020202020526967687400000000000000000000000000000000000000000000602082015260400190565b6000828210156127635761276361256e565b500390565b60008261279e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b6040815260006127b66040830185612398565b9050826020830152939250505056fe608060405234801561001057600080fd5b5061063c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063e03110e111610050578063e03110e114610106578063e15926111461012e578063fef2b4ed1461014357600080fd5b806361238bde146100775780638542cf50146100b5578063c0c220c9146100f3575b600080fd5b6100a26100853660046104df565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6100e36100c33660046104df565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ac565b6100a2610101366004610501565b610163565b6101196101143660046104df565b610238565b604080519283526020830191909152016100ac565b61014161013c36600461053c565b610329565b005b6100a26101513660046105b8565b60006020819052908152604090205481565b600061016f8686610432565b905061017c836008610600565b8211806101895750602083115b156101c0576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b6000828152600260209081526040808320848452909152812054819060ff166102c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b50600083815260208181526040909120546102dd816008610600565b6102e8856020610600565b1061030657836102f9826008610600565b6103039190610618565b91505b506000938452600160209081526040808620948652939052919092205492909150565b604435600080600883018611156103485763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316176104d8818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b600080604083850312156104f257600080fd5b50508035926020909101359150565b600080600080600060a0868803121561051957600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060006040848603121561055157600080fd5b83359250602084013567ffffffffffffffff8082111561057057600080fd5b818601915086601f83011261058457600080fd5b81358181111561059357600080fd5b8760208285010111156105a557600080fd5b6020830194508093505050509250925092565b6000602082840312156105ca57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610613576106136105d1565b500190565b60008282101561062a5761062a6105d1565b50039056fea164736f6c634300080f000aa164736f6c634300080f000a",
}

// PreimageOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use PreimageOracleMetaData.ABI instead.
var PreimageOracleABI = PreimageOracleMetaData.ABI

// PreimageOracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PreimageOracleMetaData.Bin instead.
var PreimageOracleBin = PreimageOracleMetaData.Bin

// DeployPreimageOracle deploys a new Ethereum contract, binding an instance of PreimageOracle to it.
func DeployPreimageOracle(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PreimageOracle, error) {
	parsed, err := PreimageOracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PreimageOracleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PreimageOracle{PreimageOracleCaller: PreimageOracleCaller{contract: contract}, PreimageOracleTransactor: PreimageOracleTransactor{contract: contract}, PreimageOracleFilterer: PreimageOracleFilterer{contract: contract}}, nil
}

// PreimageOracle is an auto generated Go binding around an Ethereum contract.
type PreimageOracle struct {
	PreimageOracleCaller     // Read-only binding to the contract
	PreimageOracleTransactor // Write-only binding to the contract
	PreimageOracleFilterer   // Log filterer for contract events
}

// PreimageOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type PreimageOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreimageOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PreimageOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreimageOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PreimageOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PreimageOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PreimageOracleSession struct {
	Contract     *PreimageOracle   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PreimageOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PreimageOracleCallerSession struct {
	Contract *PreimageOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// PreimageOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PreimageOracleTransactorSession struct {
	Contract     *PreimageOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PreimageOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type PreimageOracleRaw struct {
	Contract *PreimageOracle // Generic contract binding to access the raw methods on
}

// PreimageOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PreimageOracleCallerRaw struct {
	Contract *PreimageOracleCaller // Generic read-only contract binding to access the raw methods on
}

// PreimageOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PreimageOracleTransactorRaw struct {
	Contract *PreimageOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPreimageOracle creates a new instance of PreimageOracle, bound to a specific deployed contract.
func NewPreimageOracle(address common.Address, backend bind.ContractBackend) (*PreimageOracle, error) {
	contract, err := bindPreimageOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PreimageOracle{PreimageOracleCaller: PreimageOracleCaller{contract: contract}, PreimageOracleTransactor: PreimageOracleTransactor{contract: contract}, PreimageOracleFilterer: PreimageOracleFilterer{contract: contract}}, nil
}

// NewPreimageOracleCaller creates a new read-only instance of PreimageOracle, bound to a specific deployed contract.
func NewPreimageOracleCaller(address common.Address, caller bind.ContractCaller) (*PreimageOracleCaller, error) {
	contract, err := bindPreimageOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PreimageOracleCaller{contract: contract}, nil
}

// NewPreimageOracleTransactor creates a new write-only instance of PreimageOracle, bound to a specific deployed contract.
func NewPreimageOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*PreimageOracleTransactor, error) {
	contract, err := bindPreimageOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PreimageOracleTransactor{contract: contract}, nil
}

// NewPreimageOracleFilterer creates a new log filterer instance of PreimageOracle, bound to a specific deployed contract.
func NewPreimageOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*PreimageOracleFilterer, error) {
	contract, err := bindPreimageOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PreimageOracleFilterer{contract: contract}, nil
}

// bindPreimageOracle binds a generic wrapper to an already deployed contract.
func bindPreimageOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PreimageOracleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PreimageOracle *PreimageOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PreimageOracle.Contract.PreimageOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PreimageOracle *PreimageOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.Contract.PreimageOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PreimageOracle *PreimageOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PreimageOracle.Contract.PreimageOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PreimageOracle *PreimageOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PreimageOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PreimageOracle *PreimageOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PreimageOracle *PreimageOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PreimageOracle.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_PreimageOracle *PreimageOracleCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_PreimageOracle *PreimageOracleSession) ISTEST() (bool, error) {
	return _PreimageOracle.Contract.ISTEST(&_PreimageOracle.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_PreimageOracle *PreimageOracleCallerSession) ISTEST() (bool, error) {
	return _PreimageOracle.Contract.ISTEST(&_PreimageOracle.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_PreimageOracle *PreimageOracleCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_PreimageOracle *PreimageOracleSession) ExcludeArtifacts() ([]string, error) {
	return _PreimageOracle.Contract.ExcludeArtifacts(&_PreimageOracle.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_PreimageOracle *PreimageOracleCallerSession) ExcludeArtifacts() ([]string, error) {
	return _PreimageOracle.Contract.ExcludeArtifacts(&_PreimageOracle.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_PreimageOracle *PreimageOracleCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_PreimageOracle *PreimageOracleSession) ExcludeContracts() ([]common.Address, error) {
	return _PreimageOracle.Contract.ExcludeContracts(&_PreimageOracle.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_PreimageOracle *PreimageOracleCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _PreimageOracle.Contract.ExcludeContracts(&_PreimageOracle.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_PreimageOracle *PreimageOracleCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_PreimageOracle *PreimageOracleSession) ExcludeSenders() ([]common.Address, error) {
	return _PreimageOracle.Contract.ExcludeSenders(&_PreimageOracle.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_PreimageOracle *PreimageOracleCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _PreimageOracle.Contract.ExcludeSenders(&_PreimageOracle.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_PreimageOracle *PreimageOracleCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_PreimageOracle *PreimageOracleSession) TargetArtifactSelectors() ([]StdInvariantFuzzSelector, error) {
	return _PreimageOracle.Contract.TargetArtifactSelectors(&_PreimageOracle.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_PreimageOracle *PreimageOracleCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzSelector, error) {
	return _PreimageOracle.Contract.TargetArtifactSelectors(&_PreimageOracle.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_PreimageOracle *PreimageOracleCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_PreimageOracle *PreimageOracleSession) TargetArtifacts() ([]string, error) {
	return _PreimageOracle.Contract.TargetArtifacts(&_PreimageOracle.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_PreimageOracle *PreimageOracleCallerSession) TargetArtifacts() ([]string, error) {
	return _PreimageOracle.Contract.TargetArtifacts(&_PreimageOracle.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_PreimageOracle *PreimageOracleCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_PreimageOracle *PreimageOracleSession) TargetContracts() ([]common.Address, error) {
	return _PreimageOracle.Contract.TargetContracts(&_PreimageOracle.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_PreimageOracle *PreimageOracleCallerSession) TargetContracts() ([]common.Address, error) {
	return _PreimageOracle.Contract.TargetContracts(&_PreimageOracle.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_PreimageOracle *PreimageOracleCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_PreimageOracle *PreimageOracleSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _PreimageOracle.Contract.TargetSelectors(&_PreimageOracle.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_PreimageOracle *PreimageOracleCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _PreimageOracle.Contract.TargetSelectors(&_PreimageOracle.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_PreimageOracle *PreimageOracleCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _PreimageOracle.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_PreimageOracle *PreimageOracleSession) TargetSenders() ([]common.Address, error) {
	return _PreimageOracle.Contract.TargetSenders(&_PreimageOracle.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_PreimageOracle *PreimageOracleCallerSession) TargetSenders() ([]common.Address, error) {
	return _PreimageOracle.Contract.TargetSenders(&_PreimageOracle.CallOpts)
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_PreimageOracle *PreimageOracleTransactor) Failed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "failed")
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_PreimageOracle *PreimageOracleSession) Failed() (*types.Transaction, error) {
	return _PreimageOracle.Contract.Failed(&_PreimageOracle.TransactOpts)
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_PreimageOracle *PreimageOracleTransactorSession) Failed() (*types.Transaction, error) {
	return _PreimageOracle.Contract.Failed(&_PreimageOracle.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_PreimageOracle *PreimageOracleTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_PreimageOracle *PreimageOracleSession) SetUp() (*types.Transaction, error) {
	return _PreimageOracle.Contract.SetUp(&_PreimageOracle.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) SetUp() (*types.Transaction, error) {
	return _PreimageOracle.Contract.SetUp(&_PreimageOracle.TransactOpts)
}

// TestFuzzLoadLocalDataVaryingLengthSucceeds is a paid mutator transaction binding the contract method 0x971333db.
//
// Solidity: function testFuzz_loadLocalData_varyingLength_succeeds(uint256 ident, uint256 localContext, bytes32 word, uint256 size, uint256 partOffset) returns()
func (_PreimageOracle *PreimageOracleTransactor) TestFuzzLoadLocalDataVaryingLengthSucceeds(opts *bind.TransactOpts, ident *big.Int, localContext *big.Int, word [32]byte, size *big.Int, partOffset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "testFuzz_loadLocalData_varyingLength_succeeds", ident, localContext, word, size, partOffset)
}

// TestFuzzLoadLocalDataVaryingLengthSucceeds is a paid mutator transaction binding the contract method 0x971333db.
//
// Solidity: function testFuzz_loadLocalData_varyingLength_succeeds(uint256 ident, uint256 localContext, bytes32 word, uint256 size, uint256 partOffset) returns()
func (_PreimageOracle *PreimageOracleSession) TestFuzzLoadLocalDataVaryingLengthSucceeds(ident *big.Int, localContext *big.Int, word [32]byte, size *big.Int, partOffset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestFuzzLoadLocalDataVaryingLengthSucceeds(&_PreimageOracle.TransactOpts, ident, localContext, word, size, partOffset)
}

// TestFuzzLoadLocalDataVaryingLengthSucceeds is a paid mutator transaction binding the contract method 0x971333db.
//
// Solidity: function testFuzz_loadLocalData_varyingLength_succeeds(uint256 ident, uint256 localContext, bytes32 word, uint256 size, uint256 partOffset) returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestFuzzLoadLocalDataVaryingLengthSucceeds(ident *big.Int, localContext *big.Int, word [32]byte, size *big.Int, partOffset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestFuzzLoadLocalDataVaryingLengthSucceeds(&_PreimageOracle.TransactOpts, ident, localContext, word, size, partOffset)
}

// TestFuzzReadPreimageMissingPreimageReverts is a paid mutator transaction binding the contract method 0xbf5a1573.
//
// Solidity: function testFuzz_readPreimage_missingPreimage_reverts(bytes32 key, uint256 offset) returns()
func (_PreimageOracle *PreimageOracleTransactor) TestFuzzReadPreimageMissingPreimageReverts(opts *bind.TransactOpts, key [32]byte, offset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "testFuzz_readPreimage_missingPreimage_reverts", key, offset)
}

// TestFuzzReadPreimageMissingPreimageReverts is a paid mutator transaction binding the contract method 0xbf5a1573.
//
// Solidity: function testFuzz_readPreimage_missingPreimage_reverts(bytes32 key, uint256 offset) returns()
func (_PreimageOracle *PreimageOracleSession) TestFuzzReadPreimageMissingPreimageReverts(key [32]byte, offset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestFuzzReadPreimageMissingPreimageReverts(&_PreimageOracle.TransactOpts, key, offset)
}

// TestFuzzReadPreimageMissingPreimageReverts is a paid mutator transaction binding the contract method 0xbf5a1573.
//
// Solidity: function testFuzz_readPreimage_missingPreimage_reverts(bytes32 key, uint256 offset) returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestFuzzReadPreimageMissingPreimageReverts(key [32]byte, offset *big.Int) (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestFuzzReadPreimageMissingPreimageReverts(&_PreimageOracle.TransactOpts, key, offset)
}

// TestKeccak256PreimageKeySucceeds is a paid mutator transaction binding the contract method 0x0bb6f67b.
//
// Solidity: function test_keccak256PreimageKey_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestKeccak256PreimageKeySucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_keccak256PreimageKey_succeeds")
}

// TestKeccak256PreimageKeySucceeds is a paid mutator transaction binding the contract method 0x0bb6f67b.
//
// Solidity: function test_keccak256PreimageKey_succeeds() returns()
func (_PreimageOracle *PreimageOracleSession) TestKeccak256PreimageKeySucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestKeccak256PreimageKeySucceeds(&_PreimageOracle.TransactOpts)
}

// TestKeccak256PreimageKeySucceeds is a paid mutator transaction binding the contract method 0x0bb6f67b.
//
// Solidity: function test_keccak256PreimageKey_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestKeccak256PreimageKeySucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestKeccak256PreimageKeySucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xf87ee928.
//
// Solidity: function test_loadKeccak256PreimagePart_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_loadKeccak256PreimagePart_outOfBoundsOffset_reverts")
}

// TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xf87ee928.
//
// Solidity: function test_loadKeccak256PreimagePart_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleSession) TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts(&_PreimageOracle.TransactOpts)
}

// TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xf87ee928.
//
// Solidity: function test_loadKeccak256PreimagePart_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadKeccak256PreimagePartOutOfBoundsOffsetReverts(&_PreimageOracle.TransactOpts)
}

// TestLoadKeccak256PreimagePartSucceeds is a paid mutator transaction binding the contract method 0x58d4c89d.
//
// Solidity: function test_loadKeccak256PreimagePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestLoadKeccak256PreimagePartSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_loadKeccak256PreimagePart_succeeds")
}

// TestLoadKeccak256PreimagePartSucceeds is a paid mutator transaction binding the contract method 0x58d4c89d.
//
// Solidity: function test_loadKeccak256PreimagePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleSession) TestLoadKeccak256PreimagePartSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadKeccak256PreimagePartSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadKeccak256PreimagePartSucceeds is a paid mutator transaction binding the contract method 0x58d4c89d.
//
// Solidity: function test_loadKeccak256PreimagePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestLoadKeccak256PreimagePartSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadKeccak256PreimagePartSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataMultipleContextsSucceeds is a paid mutator transaction binding the contract method 0xf971dc04.
//
// Solidity: function test_loadLocalData_multipleContexts_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestLoadLocalDataMultipleContextsSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_loadLocalData_multipleContexts_succeeds")
}

// TestLoadLocalDataMultipleContextsSucceeds is a paid mutator transaction binding the contract method 0xf971dc04.
//
// Solidity: function test_loadLocalData_multipleContexts_succeeds() returns()
func (_PreimageOracle *PreimageOracleSession) TestLoadLocalDataMultipleContextsSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataMultipleContextsSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataMultipleContextsSucceeds is a paid mutator transaction binding the contract method 0xf971dc04.
//
// Solidity: function test_loadLocalData_multipleContexts_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestLoadLocalDataMultipleContextsSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataMultipleContextsSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataOnePartSucceeds is a paid mutator transaction binding the contract method 0x59404984.
//
// Solidity: function test_loadLocalData_onePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestLoadLocalDataOnePartSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_loadLocalData_onePart_succeeds")
}

// TestLoadLocalDataOnePartSucceeds is a paid mutator transaction binding the contract method 0x59404984.
//
// Solidity: function test_loadLocalData_onePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleSession) TestLoadLocalDataOnePartSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataOnePartSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataOnePartSucceeds is a paid mutator transaction binding the contract method 0x59404984.
//
// Solidity: function test_loadLocalData_onePart_succeeds() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestLoadLocalDataOnePartSucceeds() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataOnePartSucceeds(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xa41b1c71.
//
// Solidity: function test_loadLocalData_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleTransactor) TestLoadLocalDataOutOfBoundsOffsetReverts(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PreimageOracle.contract.Transact(opts, "test_loadLocalData_outOfBoundsOffset_reverts")
}

// TestLoadLocalDataOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xa41b1c71.
//
// Solidity: function test_loadLocalData_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleSession) TestLoadLocalDataOutOfBoundsOffsetReverts() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataOutOfBoundsOffsetReverts(&_PreimageOracle.TransactOpts)
}

// TestLoadLocalDataOutOfBoundsOffsetReverts is a paid mutator transaction binding the contract method 0xa41b1c71.
//
// Solidity: function test_loadLocalData_outOfBoundsOffset_reverts() returns()
func (_PreimageOracle *PreimageOracleTransactorSession) TestLoadLocalDataOutOfBoundsOffsetReverts() (*types.Transaction, error) {
	return _PreimageOracle.Contract.TestLoadLocalDataOutOfBoundsOffsetReverts(&_PreimageOracle.TransactOpts)
}

// PreimageOracleLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the PreimageOracle contract.
type PreimageOracleLogIterator struct {
	Event *PreimageOracleLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLog represents a Log event raised by the PreimageOracle contract.
type PreimageOracleLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLog(opts *bind.FilterOpts) (*PreimageOracleLogIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogIterator{contract: _PreimageOracle.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *PreimageOracleLog) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLog)
				if err := _PreimageOracle.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLog(log types.Log) (*PreimageOracleLog, error) {
	event := new(PreimageOracleLog)
	if err := _PreimageOracle.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the PreimageOracle contract.
type PreimageOracleLogAddressIterator struct {
	Event *PreimageOracleLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogAddress represents a LogAddress event raised by the PreimageOracle contract.
type PreimageOracleLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogAddress(opts *bind.FilterOpts) (*PreimageOracleLogAddressIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogAddressIterator{contract: _PreimageOracle.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogAddress) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogAddress)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogAddress(log types.Log) (*PreimageOracleLogAddress, error) {
	event := new(PreimageOracleLogAddress)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the PreimageOracle contract.
type PreimageOracleLogArrayIterator struct {
	Event *PreimageOracleLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogArray represents a LogArray event raised by the PreimageOracle contract.
type PreimageOracleLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogArray(opts *bind.FilterOpts) (*PreimageOracleLogArrayIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogArrayIterator{contract: _PreimageOracle.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogArray) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogArray)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogArray(log types.Log) (*PreimageOracleLogArray, error) {
	event := new(PreimageOracleLogArray)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the PreimageOracle contract.
type PreimageOracleLogArray0Iterator struct {
	Event *PreimageOracleLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogArray0 represents a LogArray0 event raised by the PreimageOracle contract.
type PreimageOracleLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogArray0(opts *bind.FilterOpts) (*PreimageOracleLogArray0Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogArray0Iterator{contract: _PreimageOracle.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogArray0) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogArray0)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogArray0(log types.Log) (*PreimageOracleLogArray0, error) {
	event := new(PreimageOracleLogArray0)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the PreimageOracle contract.
type PreimageOracleLogArray1Iterator struct {
	Event *PreimageOracleLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogArray1 represents a LogArray1 event raised by the PreimageOracle contract.
type PreimageOracleLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogArray1(opts *bind.FilterOpts) (*PreimageOracleLogArray1Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogArray1Iterator{contract: _PreimageOracle.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogArray1) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogArray1)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogArray1(log types.Log) (*PreimageOracleLogArray1, error) {
	event := new(PreimageOracleLogArray1)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the PreimageOracle contract.
type PreimageOracleLogBytesIterator struct {
	Event *PreimageOracleLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogBytes represents a LogBytes event raised by the PreimageOracle contract.
type PreimageOracleLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogBytes(opts *bind.FilterOpts) (*PreimageOracleLogBytesIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogBytesIterator{contract: _PreimageOracle.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogBytes) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogBytes)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogBytes(log types.Log) (*PreimageOracleLogBytes, error) {
	event := new(PreimageOracleLogBytes)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the PreimageOracle contract.
type PreimageOracleLogBytes32Iterator struct {
	Event *PreimageOracleLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogBytes32 represents a LogBytes32 event raised by the PreimageOracle contract.
type PreimageOracleLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*PreimageOracleLogBytes32Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogBytes32Iterator{contract: _PreimageOracle.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogBytes32) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogBytes32)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogBytes32(log types.Log) (*PreimageOracleLogBytes32, error) {
	event := new(PreimageOracleLogBytes32)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the PreimageOracle contract.
type PreimageOracleLogIntIterator struct {
	Event *PreimageOracleLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogInt represents a LogInt event raised by the PreimageOracle contract.
type PreimageOracleLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogInt(opts *bind.FilterOpts) (*PreimageOracleLogIntIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogIntIterator{contract: _PreimageOracle.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogInt) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogInt)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogInt(log types.Log) (*PreimageOracleLogInt, error) {
	event := new(PreimageOracleLogInt)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the PreimageOracle contract.
type PreimageOracleLogNamedAddressIterator struct {
	Event *PreimageOracleLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedAddress represents a LogNamedAddress event raised by the PreimageOracle contract.
type PreimageOracleLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*PreimageOracleLogNamedAddressIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedAddressIterator{contract: _PreimageOracle.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedAddress)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedAddress(log types.Log) (*PreimageOracleLogNamedAddress, error) {
	event := new(PreimageOracleLogNamedAddress)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the PreimageOracle contract.
type PreimageOracleLogNamedArrayIterator struct {
	Event *PreimageOracleLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedArray represents a LogNamedArray event raised by the PreimageOracle contract.
type PreimageOracleLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*PreimageOracleLogNamedArrayIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedArrayIterator{contract: _PreimageOracle.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedArray)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedArray(log types.Log) (*PreimageOracleLogNamedArray, error) {
	event := new(PreimageOracleLogNamedArray)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the PreimageOracle contract.
type PreimageOracleLogNamedArray0Iterator struct {
	Event *PreimageOracleLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedArray0 represents a LogNamedArray0 event raised by the PreimageOracle contract.
type PreimageOracleLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*PreimageOracleLogNamedArray0Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedArray0Iterator{contract: _PreimageOracle.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedArray0)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedArray0(log types.Log) (*PreimageOracleLogNamedArray0, error) {
	event := new(PreimageOracleLogNamedArray0)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the PreimageOracle contract.
type PreimageOracleLogNamedArray1Iterator struct {
	Event *PreimageOracleLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedArray1 represents a LogNamedArray1 event raised by the PreimageOracle contract.
type PreimageOracleLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*PreimageOracleLogNamedArray1Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedArray1Iterator{contract: _PreimageOracle.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedArray1)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedArray1(log types.Log) (*PreimageOracleLogNamedArray1, error) {
	event := new(PreimageOracleLogNamedArray1)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the PreimageOracle contract.
type PreimageOracleLogNamedBytesIterator struct {
	Event *PreimageOracleLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedBytes represents a LogNamedBytes event raised by the PreimageOracle contract.
type PreimageOracleLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*PreimageOracleLogNamedBytesIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedBytesIterator{contract: _PreimageOracle.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedBytes)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedBytes(log types.Log) (*PreimageOracleLogNamedBytes, error) {
	event := new(PreimageOracleLogNamedBytes)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the PreimageOracle contract.
type PreimageOracleLogNamedBytes32Iterator struct {
	Event *PreimageOracleLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedBytes32 represents a LogNamedBytes32 event raised by the PreimageOracle contract.
type PreimageOracleLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*PreimageOracleLogNamedBytes32Iterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedBytes32Iterator{contract: _PreimageOracle.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedBytes32)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedBytes32(log types.Log) (*PreimageOracleLogNamedBytes32, error) {
	event := new(PreimageOracleLogNamedBytes32)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the PreimageOracle contract.
type PreimageOracleLogNamedDecimalIntIterator struct {
	Event *PreimageOracleLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the PreimageOracle contract.
type PreimageOracleLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*PreimageOracleLogNamedDecimalIntIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedDecimalIntIterator{contract: _PreimageOracle.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedDecimalInt)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedDecimalInt(log types.Log) (*PreimageOracleLogNamedDecimalInt, error) {
	event := new(PreimageOracleLogNamedDecimalInt)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the PreimageOracle contract.
type PreimageOracleLogNamedDecimalUintIterator struct {
	Event *PreimageOracleLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the PreimageOracle contract.
type PreimageOracleLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*PreimageOracleLogNamedDecimalUintIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedDecimalUintIterator{contract: _PreimageOracle.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedDecimalUint)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedDecimalUint(log types.Log) (*PreimageOracleLogNamedDecimalUint, error) {
	event := new(PreimageOracleLogNamedDecimalUint)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the PreimageOracle contract.
type PreimageOracleLogNamedIntIterator struct {
	Event *PreimageOracleLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedInt represents a LogNamedInt event raised by the PreimageOracle contract.
type PreimageOracleLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*PreimageOracleLogNamedIntIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedIntIterator{contract: _PreimageOracle.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedInt)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedInt(log types.Log) (*PreimageOracleLogNamedInt, error) {
	event := new(PreimageOracleLogNamedInt)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the PreimageOracle contract.
type PreimageOracleLogNamedStringIterator struct {
	Event *PreimageOracleLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedString represents a LogNamedString event raised by the PreimageOracle contract.
type PreimageOracleLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*PreimageOracleLogNamedStringIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedStringIterator{contract: _PreimageOracle.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedString) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedString)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedString(log types.Log) (*PreimageOracleLogNamedString, error) {
	event := new(PreimageOracleLogNamedString)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the PreimageOracle contract.
type PreimageOracleLogNamedUintIterator struct {
	Event *PreimageOracleLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogNamedUint represents a LogNamedUint event raised by the PreimageOracle contract.
type PreimageOracleLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*PreimageOracleLogNamedUintIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogNamedUintIterator{contract: _PreimageOracle.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogNamedUint)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogNamedUint(log types.Log) (*PreimageOracleLogNamedUint, error) {
	event := new(PreimageOracleLogNamedUint)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the PreimageOracle contract.
type PreimageOracleLogStringIterator struct {
	Event *PreimageOracleLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogString represents a LogString event raised by the PreimageOracle contract.
type PreimageOracleLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogString(opts *bind.FilterOpts) (*PreimageOracleLogStringIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogStringIterator{contract: _PreimageOracle.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogString) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogString)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogString(log types.Log) (*PreimageOracleLogString, error) {
	event := new(PreimageOracleLogString)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the PreimageOracle contract.
type PreimageOracleLogUintIterator struct {
	Event *PreimageOracleLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogUint represents a LogUint event raised by the PreimageOracle contract.
type PreimageOracleLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogUint(opts *bind.FilterOpts) (*PreimageOracleLogUintIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogUintIterator{contract: _PreimageOracle.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogUint) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogUint)
				if err := _PreimageOracle.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogUint(log types.Log) (*PreimageOracleLogUint, error) {
	event := new(PreimageOracleLogUint)
	if err := _PreimageOracle.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PreimageOracleLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the PreimageOracle contract.
type PreimageOracleLogsIterator struct {
	Event *PreimageOracleLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PreimageOracleLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PreimageOracleLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PreimageOracleLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PreimageOracleLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PreimageOracleLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PreimageOracleLogs represents a Logs event raised by the PreimageOracle contract.
type PreimageOracleLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) FilterLogs(opts *bind.FilterOpts) (*PreimageOracleLogsIterator, error) {

	logs, sub, err := _PreimageOracle.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &PreimageOracleLogsIterator{contract: _PreimageOracle.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *PreimageOracleLogs) (event.Subscription, error) {

	logs, sub, err := _PreimageOracle.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PreimageOracleLogs)
				if err := _PreimageOracle.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_PreimageOracle *PreimageOracleFilterer) ParseLogs(log types.Log) (*PreimageOracleLogs, error) {
	event := new(PreimageOracleLogs)
	if err := _PreimageOracle.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
