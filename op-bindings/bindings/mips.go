// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// MIPSMetaData contains all meta data concerning the MIPS contract.
var MIPSMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"opaqueData\",\"type\":\"bytes\"}],\"name\":\"TransactionDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_add_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_addiSign_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_addi_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_addu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_addui_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_and_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_andi_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_beq_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_bgez_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_bgtz_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_blez_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_bltz_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_bne_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_branch_inDelaySlot_fails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_brk_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_clo_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_clone_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_clz_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_div_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_divu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_exit_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_fcntl_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_illegal_instruction_fails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_invalid_root_fails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jal_nonzeroRegion_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jal_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jalr_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jr_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jump_inDelaySlot_fails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jump_nonzeroRegion_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_jump_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lb_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lbu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lh_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lhu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_ll_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lui_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lw_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lwl_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_lwr_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mfhi_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mflo_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mmap_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_movn_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_movz_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mthi_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mtlo_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mul_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_mult_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_multu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_nor_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_or_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_ori_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_preimage_read_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_preimage_write_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_prestate_exited_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sb_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sc_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sh_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sll_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sllv_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_slt_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sltu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sra_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_srav_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_srl_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_srlv_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_step_abi_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sub_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_subu_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_sw_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_swl_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_swr_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_xor_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_xori_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// MIPSABI is the input ABI used to generate the binding from.
// Deprecated: Use MIPSMetaData.ABI instead.
var MIPSABI = MIPSMetaData.ABI

// MIPSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MIPSMetaData.Bin instead.
var MIPSBin = MIPSMetaData.Bin

// DeployMIPS deploys a new Ethereum contract, binding an instance of MIPS to it.
func DeployMIPS(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MIPS, error) {
	parsed, err := MIPSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MIPSBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MIPS{MIPSCaller: MIPSCaller{contract: contract}, MIPSTransactor: MIPSTransactor{contract: contract}, MIPSFilterer: MIPSFilterer{contract: contract}}, nil
}

// MIPS is an auto generated Go binding around an Ethereum contract.
type MIPS struct {
	MIPSCaller     // Read-only binding to the contract
	MIPSTransactor // Write-only binding to the contract
	MIPSFilterer   // Log filterer for contract events
}

// MIPSCaller is an auto generated read-only Go binding around an Ethereum contract.
type MIPSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MIPSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MIPSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MIPSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MIPSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MIPSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MIPSSession struct {
	Contract     *MIPS             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MIPSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MIPSCallerSession struct {
	Contract *MIPSCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MIPSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MIPSTransactorSession struct {
	Contract     *MIPSTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MIPSRaw is an auto generated low-level Go binding around an Ethereum contract.
type MIPSRaw struct {
	Contract *MIPS // Generic contract binding to access the raw methods on
}

// MIPSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MIPSCallerRaw struct {
	Contract *MIPSCaller // Generic read-only contract binding to access the raw methods on
}

// MIPSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MIPSTransactorRaw struct {
	Contract *MIPSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMIPS creates a new instance of MIPS, bound to a specific deployed contract.
func NewMIPS(address common.Address, backend bind.ContractBackend) (*MIPS, error) {
	contract, err := bindMIPS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MIPS{MIPSCaller: MIPSCaller{contract: contract}, MIPSTransactor: MIPSTransactor{contract: contract}, MIPSFilterer: MIPSFilterer{contract: contract}}, nil
}

// NewMIPSCaller creates a new read-only instance of MIPS, bound to a specific deployed contract.
func NewMIPSCaller(address common.Address, caller bind.ContractCaller) (*MIPSCaller, error) {
	contract, err := bindMIPS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MIPSCaller{contract: contract}, nil
}

// NewMIPSTransactor creates a new write-only instance of MIPS, bound to a specific deployed contract.
func NewMIPSTransactor(address common.Address, transactor bind.ContractTransactor) (*MIPSTransactor, error) {
	contract, err := bindMIPS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MIPSTransactor{contract: contract}, nil
}

// NewMIPSFilterer creates a new log filterer instance of MIPS, bound to a specific deployed contract.
func NewMIPSFilterer(address common.Address, filterer bind.ContractFilterer) (*MIPSFilterer, error) {
	contract, err := bindMIPS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MIPSFilterer{contract: contract}, nil
}

// bindMIPS binds a generic wrapper to an already deployed contract.
func bindMIPS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MIPSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MIPS *MIPSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MIPS.Contract.MIPSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MIPS *MIPSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.Contract.MIPSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MIPS *MIPSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MIPS.Contract.MIPSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MIPS *MIPSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MIPS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MIPS *MIPSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MIPS *MIPSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MIPS.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_MIPS *MIPSCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_MIPS *MIPSSession) ISTEST() (bool, error) {
	return _MIPS.Contract.ISTEST(&_MIPS.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_MIPS *MIPSCallerSession) ISTEST() (bool, error) {
	return _MIPS.Contract.ISTEST(&_MIPS.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_MIPS *MIPSCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_MIPS *MIPSSession) ExcludeArtifacts() ([]string, error) {
	return _MIPS.Contract.ExcludeArtifacts(&_MIPS.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_MIPS *MIPSCallerSession) ExcludeArtifacts() ([]string, error) {
	return _MIPS.Contract.ExcludeArtifacts(&_MIPS.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_MIPS *MIPSCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_MIPS *MIPSSession) ExcludeContracts() ([]common.Address, error) {
	return _MIPS.Contract.ExcludeContracts(&_MIPS.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_MIPS *MIPSCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _MIPS.Contract.ExcludeContracts(&_MIPS.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_MIPS *MIPSCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_MIPS *MIPSSession) ExcludeSenders() ([]common.Address, error) {
	return _MIPS.Contract.ExcludeSenders(&_MIPS.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_MIPS *MIPSCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _MIPS.Contract.ExcludeSenders(&_MIPS.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_MIPS *MIPSCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_MIPS *MIPSSession) TargetArtifactSelectors() ([]StdInvariantFuzzSelector, error) {
	return _MIPS.Contract.TargetArtifactSelectors(&_MIPS.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((address,bytes4[])[] targetedArtifactSelectors_)
func (_MIPS *MIPSCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzSelector, error) {
	return _MIPS.Contract.TargetArtifactSelectors(&_MIPS.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_MIPS *MIPSCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_MIPS *MIPSSession) TargetArtifacts() ([]string, error) {
	return _MIPS.Contract.TargetArtifacts(&_MIPS.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_MIPS *MIPSCallerSession) TargetArtifacts() ([]string, error) {
	return _MIPS.Contract.TargetArtifacts(&_MIPS.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_MIPS *MIPSCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_MIPS *MIPSSession) TargetContracts() ([]common.Address, error) {
	return _MIPS.Contract.TargetContracts(&_MIPS.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_MIPS *MIPSCallerSession) TargetContracts() ([]common.Address, error) {
	return _MIPS.Contract.TargetContracts(&_MIPS.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_MIPS *MIPSCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_MIPS *MIPSSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _MIPS.Contract.TargetSelectors(&_MIPS.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_MIPS *MIPSCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _MIPS.Contract.TargetSelectors(&_MIPS.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_MIPS *MIPSCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MIPS.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_MIPS *MIPSSession) TargetSenders() ([]common.Address, error) {
	return _MIPS.Contract.TargetSenders(&_MIPS.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_MIPS *MIPSCallerSession) TargetSenders() ([]common.Address, error) {
	return _MIPS.Contract.TargetSenders(&_MIPS.CallOpts)
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_MIPS *MIPSTransactor) Failed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "failed")
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_MIPS *MIPSSession) Failed() (*types.Transaction, error) {
	return _MIPS.Contract.Failed(&_MIPS.TransactOpts)
}

// Failed is a paid mutator transaction binding the contract method 0xba414fa6.
//
// Solidity: function failed() returns(bool)
func (_MIPS *MIPSTransactorSession) Failed() (*types.Transaction, error) {
	return _MIPS.Contract.Failed(&_MIPS.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_MIPS *MIPSTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_MIPS *MIPSSession) SetUp() (*types.Transaction, error) {
	return _MIPS.Contract.SetUp(&_MIPS.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_MIPS *MIPSTransactorSession) SetUp() (*types.Transaction, error) {
	return _MIPS.Contract.SetUp(&_MIPS.TransactOpts)
}

// TestAddSucceeds is a paid mutator transaction binding the contract method 0xea391df8.
//
// Solidity: function test_add_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAddSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_add_succeeds")
}

// TestAddSucceeds is a paid mutator transaction binding the contract method 0xea391df8.
//
// Solidity: function test_add_succeeds() returns()
func (_MIPS *MIPSSession) TestAddSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddSucceeds(&_MIPS.TransactOpts)
}

// TestAddSucceeds is a paid mutator transaction binding the contract method 0xea391df8.
//
// Solidity: function test_add_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAddSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddSucceeds(&_MIPS.TransactOpts)
}

// TestAddiSignSucceeds is a paid mutator transaction binding the contract method 0x012f2710.
//
// Solidity: function test_addiSign_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAddiSignSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_addiSign_succeeds")
}

// TestAddiSignSucceeds is a paid mutator transaction binding the contract method 0x012f2710.
//
// Solidity: function test_addiSign_succeeds() returns()
func (_MIPS *MIPSSession) TestAddiSignSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddiSignSucceeds(&_MIPS.TransactOpts)
}

// TestAddiSignSucceeds is a paid mutator transaction binding the contract method 0x012f2710.
//
// Solidity: function test_addiSign_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAddiSignSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddiSignSucceeds(&_MIPS.TransactOpts)
}

// TestAddiSucceeds is a paid mutator transaction binding the contract method 0x73a278f5.
//
// Solidity: function test_addi_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAddiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_addi_succeeds")
}

// TestAddiSucceeds is a paid mutator transaction binding the contract method 0x73a278f5.
//
// Solidity: function test_addi_succeeds() returns()
func (_MIPS *MIPSSession) TestAddiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddiSucceeds(&_MIPS.TransactOpts)
}

// TestAddiSucceeds is a paid mutator transaction binding the contract method 0x73a278f5.
//
// Solidity: function test_addi_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAddiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAddiSucceeds(&_MIPS.TransactOpts)
}

// TestAdduSucceeds is a paid mutator transaction binding the contract method 0x3045c8f5.
//
// Solidity: function test_addu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAdduSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_addu_succeeds")
}

// TestAdduSucceeds is a paid mutator transaction binding the contract method 0x3045c8f5.
//
// Solidity: function test_addu_succeeds() returns()
func (_MIPS *MIPSSession) TestAdduSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAdduSucceeds(&_MIPS.TransactOpts)
}

// TestAdduSucceeds is a paid mutator transaction binding the contract method 0x3045c8f5.
//
// Solidity: function test_addu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAdduSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAdduSucceeds(&_MIPS.TransactOpts)
}

// TestAdduiSucceeds is a paid mutator transaction binding the contract method 0xa93f5a61.
//
// Solidity: function test_addui_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAdduiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_addui_succeeds")
}

// TestAdduiSucceeds is a paid mutator transaction binding the contract method 0xa93f5a61.
//
// Solidity: function test_addui_succeeds() returns()
func (_MIPS *MIPSSession) TestAdduiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAdduiSucceeds(&_MIPS.TransactOpts)
}

// TestAdduiSucceeds is a paid mutator transaction binding the contract method 0xa93f5a61.
//
// Solidity: function test_addui_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAdduiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAdduiSucceeds(&_MIPS.TransactOpts)
}

// TestAndSucceeds is a paid mutator transaction binding the contract method 0x53f4f3b2.
//
// Solidity: function test_and_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAndSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_and_succeeds")
}

// TestAndSucceeds is a paid mutator transaction binding the contract method 0x53f4f3b2.
//
// Solidity: function test_and_succeeds() returns()
func (_MIPS *MIPSSession) TestAndSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAndSucceeds(&_MIPS.TransactOpts)
}

// TestAndSucceeds is a paid mutator transaction binding the contract method 0x53f4f3b2.
//
// Solidity: function test_and_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAndSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAndSucceeds(&_MIPS.TransactOpts)
}

// TestAndiSucceeds is a paid mutator transaction binding the contract method 0x47116220.
//
// Solidity: function test_andi_succeeds() returns()
func (_MIPS *MIPSTransactor) TestAndiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_andi_succeeds")
}

// TestAndiSucceeds is a paid mutator transaction binding the contract method 0x47116220.
//
// Solidity: function test_andi_succeeds() returns()
func (_MIPS *MIPSSession) TestAndiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAndiSucceeds(&_MIPS.TransactOpts)
}

// TestAndiSucceeds is a paid mutator transaction binding the contract method 0x47116220.
//
// Solidity: function test_andi_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestAndiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestAndiSucceeds(&_MIPS.TransactOpts)
}

// TestBeqSucceeds is a paid mutator transaction binding the contract method 0xdbb6d644.
//
// Solidity: function test_beq_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBeqSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_beq_succeeds")
}

// TestBeqSucceeds is a paid mutator transaction binding the contract method 0xdbb6d644.
//
// Solidity: function test_beq_succeeds() returns()
func (_MIPS *MIPSSession) TestBeqSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBeqSucceeds(&_MIPS.TransactOpts)
}

// TestBeqSucceeds is a paid mutator transaction binding the contract method 0xdbb6d644.
//
// Solidity: function test_beq_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBeqSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBeqSucceeds(&_MIPS.TransactOpts)
}

// TestBgezSucceeds is a paid mutator transaction binding the contract method 0x4c87f1e8.
//
// Solidity: function test_bgez_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBgezSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_bgez_succeeds")
}

// TestBgezSucceeds is a paid mutator transaction binding the contract method 0x4c87f1e8.
//
// Solidity: function test_bgez_succeeds() returns()
func (_MIPS *MIPSSession) TestBgezSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBgezSucceeds(&_MIPS.TransactOpts)
}

// TestBgezSucceeds is a paid mutator transaction binding the contract method 0x4c87f1e8.
//
// Solidity: function test_bgez_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBgezSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBgezSucceeds(&_MIPS.TransactOpts)
}

// TestBgtzSucceeds is a paid mutator transaction binding the contract method 0x7671b32a.
//
// Solidity: function test_bgtz_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBgtzSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_bgtz_succeeds")
}

// TestBgtzSucceeds is a paid mutator transaction binding the contract method 0x7671b32a.
//
// Solidity: function test_bgtz_succeeds() returns()
func (_MIPS *MIPSSession) TestBgtzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBgtzSucceeds(&_MIPS.TransactOpts)
}

// TestBgtzSucceeds is a paid mutator transaction binding the contract method 0x7671b32a.
//
// Solidity: function test_bgtz_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBgtzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBgtzSucceeds(&_MIPS.TransactOpts)
}

// TestBlezSucceeds is a paid mutator transaction binding the contract method 0x6e3238a5.
//
// Solidity: function test_blez_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBlezSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_blez_succeeds")
}

// TestBlezSucceeds is a paid mutator transaction binding the contract method 0x6e3238a5.
//
// Solidity: function test_blez_succeeds() returns()
func (_MIPS *MIPSSession) TestBlezSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBlezSucceeds(&_MIPS.TransactOpts)
}

// TestBlezSucceeds is a paid mutator transaction binding the contract method 0x6e3238a5.
//
// Solidity: function test_blez_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBlezSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBlezSucceeds(&_MIPS.TransactOpts)
}

// TestBltzSucceeds is a paid mutator transaction binding the contract method 0x934c132b.
//
// Solidity: function test_bltz_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBltzSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_bltz_succeeds")
}

// TestBltzSucceeds is a paid mutator transaction binding the contract method 0x934c132b.
//
// Solidity: function test_bltz_succeeds() returns()
func (_MIPS *MIPSSession) TestBltzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBltzSucceeds(&_MIPS.TransactOpts)
}

// TestBltzSucceeds is a paid mutator transaction binding the contract method 0x934c132b.
//
// Solidity: function test_bltz_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBltzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBltzSucceeds(&_MIPS.TransactOpts)
}

// TestBneSucceeds is a paid mutator transaction binding the contract method 0x6ff0d3c6.
//
// Solidity: function test_bne_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBneSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_bne_succeeds")
}

// TestBneSucceeds is a paid mutator transaction binding the contract method 0x6ff0d3c6.
//
// Solidity: function test_bne_succeeds() returns()
func (_MIPS *MIPSSession) TestBneSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBneSucceeds(&_MIPS.TransactOpts)
}

// TestBneSucceeds is a paid mutator transaction binding the contract method 0x6ff0d3c6.
//
// Solidity: function test_bne_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBneSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBneSucceeds(&_MIPS.TransactOpts)
}

// TestBranchInDelaySlotFails is a paid mutator transaction binding the contract method 0xac7811c2.
//
// Solidity: function test_branch_inDelaySlot_fails() returns()
func (_MIPS *MIPSTransactor) TestBranchInDelaySlotFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_branch_inDelaySlot_fails")
}

// TestBranchInDelaySlotFails is a paid mutator transaction binding the contract method 0xac7811c2.
//
// Solidity: function test_branch_inDelaySlot_fails() returns()
func (_MIPS *MIPSSession) TestBranchInDelaySlotFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestBranchInDelaySlotFails(&_MIPS.TransactOpts)
}

// TestBranchInDelaySlotFails is a paid mutator transaction binding the contract method 0xac7811c2.
//
// Solidity: function test_branch_inDelaySlot_fails() returns()
func (_MIPS *MIPSTransactorSession) TestBranchInDelaySlotFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestBranchInDelaySlotFails(&_MIPS.TransactOpts)
}

// TestBrkSucceeds is a paid mutator transaction binding the contract method 0xa676a013.
//
// Solidity: function test_brk_succeeds() returns()
func (_MIPS *MIPSTransactor) TestBrkSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_brk_succeeds")
}

// TestBrkSucceeds is a paid mutator transaction binding the contract method 0xa676a013.
//
// Solidity: function test_brk_succeeds() returns()
func (_MIPS *MIPSSession) TestBrkSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBrkSucceeds(&_MIPS.TransactOpts)
}

// TestBrkSucceeds is a paid mutator transaction binding the contract method 0xa676a013.
//
// Solidity: function test_brk_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestBrkSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestBrkSucceeds(&_MIPS.TransactOpts)
}

// TestCloSucceeds is a paid mutator transaction binding the contract method 0xdddc5cf7.
//
// Solidity: function test_clo_succeeds() returns()
func (_MIPS *MIPSTransactor) TestCloSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_clo_succeeds")
}

// TestCloSucceeds is a paid mutator transaction binding the contract method 0xdddc5cf7.
//
// Solidity: function test_clo_succeeds() returns()
func (_MIPS *MIPSSession) TestCloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestCloSucceeds(&_MIPS.TransactOpts)
}

// TestCloSucceeds is a paid mutator transaction binding the contract method 0xdddc5cf7.
//
// Solidity: function test_clo_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestCloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestCloSucceeds(&_MIPS.TransactOpts)
}

// TestCloneSucceeds is a paid mutator transaction binding the contract method 0xf85c53d1.
//
// Solidity: function test_clone_succeeds() returns()
func (_MIPS *MIPSTransactor) TestCloneSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_clone_succeeds")
}

// TestCloneSucceeds is a paid mutator transaction binding the contract method 0xf85c53d1.
//
// Solidity: function test_clone_succeeds() returns()
func (_MIPS *MIPSSession) TestCloneSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestCloneSucceeds(&_MIPS.TransactOpts)
}

// TestCloneSucceeds is a paid mutator transaction binding the contract method 0xf85c53d1.
//
// Solidity: function test_clone_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestCloneSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestCloneSucceeds(&_MIPS.TransactOpts)
}

// TestClzSucceeds is a paid mutator transaction binding the contract method 0x8388ad52.
//
// Solidity: function test_clz_succeeds() returns()
func (_MIPS *MIPSTransactor) TestClzSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_clz_succeeds")
}

// TestClzSucceeds is a paid mutator transaction binding the contract method 0x8388ad52.
//
// Solidity: function test_clz_succeeds() returns()
func (_MIPS *MIPSSession) TestClzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestClzSucceeds(&_MIPS.TransactOpts)
}

// TestClzSucceeds is a paid mutator transaction binding the contract method 0x8388ad52.
//
// Solidity: function test_clz_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestClzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestClzSucceeds(&_MIPS.TransactOpts)
}

// TestDivSucceeds is a paid mutator transaction binding the contract method 0xdeb2ee66.
//
// Solidity: function test_div_succeeds() returns()
func (_MIPS *MIPSTransactor) TestDivSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_div_succeeds")
}

// TestDivSucceeds is a paid mutator transaction binding the contract method 0xdeb2ee66.
//
// Solidity: function test_div_succeeds() returns()
func (_MIPS *MIPSSession) TestDivSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestDivSucceeds(&_MIPS.TransactOpts)
}

// TestDivSucceeds is a paid mutator transaction binding the contract method 0xdeb2ee66.
//
// Solidity: function test_div_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestDivSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestDivSucceeds(&_MIPS.TransactOpts)
}

// TestDivuSucceeds is a paid mutator transaction binding the contract method 0x9fde7275.
//
// Solidity: function test_divu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestDivuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_divu_succeeds")
}

// TestDivuSucceeds is a paid mutator transaction binding the contract method 0x9fde7275.
//
// Solidity: function test_divu_succeeds() returns()
func (_MIPS *MIPSSession) TestDivuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestDivuSucceeds(&_MIPS.TransactOpts)
}

// TestDivuSucceeds is a paid mutator transaction binding the contract method 0x9fde7275.
//
// Solidity: function test_divu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestDivuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestDivuSucceeds(&_MIPS.TransactOpts)
}

// TestExitSucceeds is a paid mutator transaction binding the contract method 0xc8c7ee89.
//
// Solidity: function test_exit_succeeds() returns()
func (_MIPS *MIPSTransactor) TestExitSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_exit_succeeds")
}

// TestExitSucceeds is a paid mutator transaction binding the contract method 0xc8c7ee89.
//
// Solidity: function test_exit_succeeds() returns()
func (_MIPS *MIPSSession) TestExitSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestExitSucceeds(&_MIPS.TransactOpts)
}

// TestExitSucceeds is a paid mutator transaction binding the contract method 0xc8c7ee89.
//
// Solidity: function test_exit_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestExitSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestExitSucceeds(&_MIPS.TransactOpts)
}

// TestFcntlSucceeds is a paid mutator transaction binding the contract method 0x4132d64e.
//
// Solidity: function test_fcntl_succeeds() returns()
func (_MIPS *MIPSTransactor) TestFcntlSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_fcntl_succeeds")
}

// TestFcntlSucceeds is a paid mutator transaction binding the contract method 0x4132d64e.
//
// Solidity: function test_fcntl_succeeds() returns()
func (_MIPS *MIPSSession) TestFcntlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestFcntlSucceeds(&_MIPS.TransactOpts)
}

// TestFcntlSucceeds is a paid mutator transaction binding the contract method 0x4132d64e.
//
// Solidity: function test_fcntl_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestFcntlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestFcntlSucceeds(&_MIPS.TransactOpts)
}

// TestIllegalInstructionFails is a paid mutator transaction binding the contract method 0x661ce59d.
//
// Solidity: function test_illegal_instruction_fails() returns()
func (_MIPS *MIPSTransactor) TestIllegalInstructionFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_illegal_instruction_fails")
}

// TestIllegalInstructionFails is a paid mutator transaction binding the contract method 0x661ce59d.
//
// Solidity: function test_illegal_instruction_fails() returns()
func (_MIPS *MIPSSession) TestIllegalInstructionFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestIllegalInstructionFails(&_MIPS.TransactOpts)
}

// TestIllegalInstructionFails is a paid mutator transaction binding the contract method 0x661ce59d.
//
// Solidity: function test_illegal_instruction_fails() returns()
func (_MIPS *MIPSTransactorSession) TestIllegalInstructionFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestIllegalInstructionFails(&_MIPS.TransactOpts)
}

// TestInvalidRootFails is a paid mutator transaction binding the contract method 0x3f8aa9ad.
//
// Solidity: function test_invalid_root_fails() returns()
func (_MIPS *MIPSTransactor) TestInvalidRootFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_invalid_root_fails")
}

// TestInvalidRootFails is a paid mutator transaction binding the contract method 0x3f8aa9ad.
//
// Solidity: function test_invalid_root_fails() returns()
func (_MIPS *MIPSSession) TestInvalidRootFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestInvalidRootFails(&_MIPS.TransactOpts)
}

// TestInvalidRootFails is a paid mutator transaction binding the contract method 0x3f8aa9ad.
//
// Solidity: function test_invalid_root_fails() returns()
func (_MIPS *MIPSTransactorSession) TestInvalidRootFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestInvalidRootFails(&_MIPS.TransactOpts)
}

// TestJalNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x2eb47032.
//
// Solidity: function test_jal_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJalNonzeroRegionSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jal_nonzeroRegion_succeeds")
}

// TestJalNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x2eb47032.
//
// Solidity: function test_jal_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSSession) TestJalNonzeroRegionSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalNonzeroRegionSucceeds(&_MIPS.TransactOpts)
}

// TestJalNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x2eb47032.
//
// Solidity: function test_jal_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJalNonzeroRegionSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalNonzeroRegionSucceeds(&_MIPS.TransactOpts)
}

// TestJalSucceeds is a paid mutator transaction binding the contract method 0x4c3413eb.
//
// Solidity: function test_jal_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJalSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jal_succeeds")
}

// TestJalSucceeds is a paid mutator transaction binding the contract method 0x4c3413eb.
//
// Solidity: function test_jal_succeeds() returns()
func (_MIPS *MIPSSession) TestJalSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalSucceeds(&_MIPS.TransactOpts)
}

// TestJalSucceeds is a paid mutator transaction binding the contract method 0x4c3413eb.
//
// Solidity: function test_jal_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJalSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalSucceeds(&_MIPS.TransactOpts)
}

// TestJalrSucceeds is a paid mutator transaction binding the contract method 0x190d4313.
//
// Solidity: function test_jalr_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJalrSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jalr_succeeds")
}

// TestJalrSucceeds is a paid mutator transaction binding the contract method 0x190d4313.
//
// Solidity: function test_jalr_succeeds() returns()
func (_MIPS *MIPSSession) TestJalrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalrSucceeds(&_MIPS.TransactOpts)
}

// TestJalrSucceeds is a paid mutator transaction binding the contract method 0x190d4313.
//
// Solidity: function test_jalr_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJalrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJalrSucceeds(&_MIPS.TransactOpts)
}

// TestJrSucceeds is a paid mutator transaction binding the contract method 0x66f25df4.
//
// Solidity: function test_jr_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJrSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jr_succeeds")
}

// TestJrSucceeds is a paid mutator transaction binding the contract method 0x66f25df4.
//
// Solidity: function test_jr_succeeds() returns()
func (_MIPS *MIPSSession) TestJrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJrSucceeds(&_MIPS.TransactOpts)
}

// TestJrSucceeds is a paid mutator transaction binding the contract method 0x66f25df4.
//
// Solidity: function test_jr_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJrSucceeds(&_MIPS.TransactOpts)
}

// TestJumpInDelaySlotFails is a paid mutator transaction binding the contract method 0x46dc9bd1.
//
// Solidity: function test_jump_inDelaySlot_fails() returns()
func (_MIPS *MIPSTransactor) TestJumpInDelaySlotFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jump_inDelaySlot_fails")
}

// TestJumpInDelaySlotFails is a paid mutator transaction binding the contract method 0x46dc9bd1.
//
// Solidity: function test_jump_inDelaySlot_fails() returns()
func (_MIPS *MIPSSession) TestJumpInDelaySlotFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpInDelaySlotFails(&_MIPS.TransactOpts)
}

// TestJumpInDelaySlotFails is a paid mutator transaction binding the contract method 0x46dc9bd1.
//
// Solidity: function test_jump_inDelaySlot_fails() returns()
func (_MIPS *MIPSTransactorSession) TestJumpInDelaySlotFails() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpInDelaySlotFails(&_MIPS.TransactOpts)
}

// TestJumpNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x35447968.
//
// Solidity: function test_jump_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJumpNonzeroRegionSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jump_nonzeroRegion_succeeds")
}

// TestJumpNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x35447968.
//
// Solidity: function test_jump_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSSession) TestJumpNonzeroRegionSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpNonzeroRegionSucceeds(&_MIPS.TransactOpts)
}

// TestJumpNonzeroRegionSucceeds is a paid mutator transaction binding the contract method 0x35447968.
//
// Solidity: function test_jump_nonzeroRegion_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJumpNonzeroRegionSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpNonzeroRegionSucceeds(&_MIPS.TransactOpts)
}

// TestJumpSucceeds is a paid mutator transaction binding the contract method 0xa56290db.
//
// Solidity: function test_jump_succeeds() returns()
func (_MIPS *MIPSTransactor) TestJumpSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_jump_succeeds")
}

// TestJumpSucceeds is a paid mutator transaction binding the contract method 0xa56290db.
//
// Solidity: function test_jump_succeeds() returns()
func (_MIPS *MIPSSession) TestJumpSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpSucceeds(&_MIPS.TransactOpts)
}

// TestJumpSucceeds is a paid mutator transaction binding the contract method 0xa56290db.
//
// Solidity: function test_jump_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestJumpSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestJumpSucceeds(&_MIPS.TransactOpts)
}

// TestLbSucceeds is a paid mutator transaction binding the contract method 0xfb5d4bac.
//
// Solidity: function test_lb_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLbSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lb_succeeds")
}

// TestLbSucceeds is a paid mutator transaction binding the contract method 0xfb5d4bac.
//
// Solidity: function test_lb_succeeds() returns()
func (_MIPS *MIPSSession) TestLbSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLbSucceeds(&_MIPS.TransactOpts)
}

// TestLbSucceeds is a paid mutator transaction binding the contract method 0xfb5d4bac.
//
// Solidity: function test_lb_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLbSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLbSucceeds(&_MIPS.TransactOpts)
}

// TestLbuSucceeds is a paid mutator transaction binding the contract method 0x4b2066fd.
//
// Solidity: function test_lbu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLbuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lbu_succeeds")
}

// TestLbuSucceeds is a paid mutator transaction binding the contract method 0x4b2066fd.
//
// Solidity: function test_lbu_succeeds() returns()
func (_MIPS *MIPSSession) TestLbuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLbuSucceeds(&_MIPS.TransactOpts)
}

// TestLbuSucceeds is a paid mutator transaction binding the contract method 0x4b2066fd.
//
// Solidity: function test_lbu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLbuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLbuSucceeds(&_MIPS.TransactOpts)
}

// TestLhSucceeds is a paid mutator transaction binding the contract method 0xb16c30a6.
//
// Solidity: function test_lh_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLhSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lh_succeeds")
}

// TestLhSucceeds is a paid mutator transaction binding the contract method 0xb16c30a6.
//
// Solidity: function test_lh_succeeds() returns()
func (_MIPS *MIPSSession) TestLhSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLhSucceeds(&_MIPS.TransactOpts)
}

// TestLhSucceeds is a paid mutator transaction binding the contract method 0xb16c30a6.
//
// Solidity: function test_lh_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLhSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLhSucceeds(&_MIPS.TransactOpts)
}

// TestLhuSucceeds is a paid mutator transaction binding the contract method 0x6071a361.
//
// Solidity: function test_lhu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLhuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lhu_succeeds")
}

// TestLhuSucceeds is a paid mutator transaction binding the contract method 0x6071a361.
//
// Solidity: function test_lhu_succeeds() returns()
func (_MIPS *MIPSSession) TestLhuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLhuSucceeds(&_MIPS.TransactOpts)
}

// TestLhuSucceeds is a paid mutator transaction binding the contract method 0x6071a361.
//
// Solidity: function test_lhu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLhuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLhuSucceeds(&_MIPS.TransactOpts)
}

// TestLlSucceeds is a paid mutator transaction binding the contract method 0x6a393e19.
//
// Solidity: function test_ll_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLlSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_ll_succeeds")
}

// TestLlSucceeds is a paid mutator transaction binding the contract method 0x6a393e19.
//
// Solidity: function test_ll_succeeds() returns()
func (_MIPS *MIPSSession) TestLlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLlSucceeds(&_MIPS.TransactOpts)
}

// TestLlSucceeds is a paid mutator transaction binding the contract method 0x6a393e19.
//
// Solidity: function test_ll_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLlSucceeds(&_MIPS.TransactOpts)
}

// TestLuiSucceeds is a paid mutator transaction binding the contract method 0x59d09b30.
//
// Solidity: function test_lui_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLuiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lui_succeeds")
}

// TestLuiSucceeds is a paid mutator transaction binding the contract method 0x59d09b30.
//
// Solidity: function test_lui_succeeds() returns()
func (_MIPS *MIPSSession) TestLuiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLuiSucceeds(&_MIPS.TransactOpts)
}

// TestLuiSucceeds is a paid mutator transaction binding the contract method 0x59d09b30.
//
// Solidity: function test_lui_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLuiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLuiSucceeds(&_MIPS.TransactOpts)
}

// TestLwSucceeds is a paid mutator transaction binding the contract method 0x097b86a6.
//
// Solidity: function test_lw_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLwSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lw_succeeds")
}

// TestLwSucceeds is a paid mutator transaction binding the contract method 0x097b86a6.
//
// Solidity: function test_lw_succeeds() returns()
func (_MIPS *MIPSSession) TestLwSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwSucceeds(&_MIPS.TransactOpts)
}

// TestLwSucceeds is a paid mutator transaction binding the contract method 0x097b86a6.
//
// Solidity: function test_lw_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLwSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwSucceeds(&_MIPS.TransactOpts)
}

// TestLwlSucceeds is a paid mutator transaction binding the contract method 0x954125ee.
//
// Solidity: function test_lwl_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLwlSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lwl_succeeds")
}

// TestLwlSucceeds is a paid mutator transaction binding the contract method 0x954125ee.
//
// Solidity: function test_lwl_succeeds() returns()
func (_MIPS *MIPSSession) TestLwlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwlSucceeds(&_MIPS.TransactOpts)
}

// TestLwlSucceeds is a paid mutator transaction binding the contract method 0x954125ee.
//
// Solidity: function test_lwl_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLwlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwlSucceeds(&_MIPS.TransactOpts)
}

// TestLwrSucceeds is a paid mutator transaction binding the contract method 0xa6972734.
//
// Solidity: function test_lwr_succeeds() returns()
func (_MIPS *MIPSTransactor) TestLwrSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_lwr_succeeds")
}

// TestLwrSucceeds is a paid mutator transaction binding the contract method 0xa6972734.
//
// Solidity: function test_lwr_succeeds() returns()
func (_MIPS *MIPSSession) TestLwrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwrSucceeds(&_MIPS.TransactOpts)
}

// TestLwrSucceeds is a paid mutator transaction binding the contract method 0xa6972734.
//
// Solidity: function test_lwr_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestLwrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestLwrSucceeds(&_MIPS.TransactOpts)
}

// TestMfhiSucceeds is a paid mutator transaction binding the contract method 0x13a23e04.
//
// Solidity: function test_mfhi_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMfhiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mfhi_succeeds")
}

// TestMfhiSucceeds is a paid mutator transaction binding the contract method 0x13a23e04.
//
// Solidity: function test_mfhi_succeeds() returns()
func (_MIPS *MIPSSession) TestMfhiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMfhiSucceeds(&_MIPS.TransactOpts)
}

// TestMfhiSucceeds is a paid mutator transaction binding the contract method 0x13a23e04.
//
// Solidity: function test_mfhi_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMfhiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMfhiSucceeds(&_MIPS.TransactOpts)
}

// TestMfloSucceeds is a paid mutator transaction binding the contract method 0x02585ab5.
//
// Solidity: function test_mflo_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMfloSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mflo_succeeds")
}

// TestMfloSucceeds is a paid mutator transaction binding the contract method 0x02585ab5.
//
// Solidity: function test_mflo_succeeds() returns()
func (_MIPS *MIPSSession) TestMfloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMfloSucceeds(&_MIPS.TransactOpts)
}

// TestMfloSucceeds is a paid mutator transaction binding the contract method 0x02585ab5.
//
// Solidity: function test_mflo_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMfloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMfloSucceeds(&_MIPS.TransactOpts)
}

// TestMmapSucceeds is a paid mutator transaction binding the contract method 0x73bd6442.
//
// Solidity: function test_mmap_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMmapSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mmap_succeeds")
}

// TestMmapSucceeds is a paid mutator transaction binding the contract method 0x73bd6442.
//
// Solidity: function test_mmap_succeeds() returns()
func (_MIPS *MIPSSession) TestMmapSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMmapSucceeds(&_MIPS.TransactOpts)
}

// TestMmapSucceeds is a paid mutator transaction binding the contract method 0x73bd6442.
//
// Solidity: function test_mmap_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMmapSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMmapSucceeds(&_MIPS.TransactOpts)
}

// TestMovnSucceeds is a paid mutator transaction binding the contract method 0xe1085fac.
//
// Solidity: function test_movn_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMovnSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_movn_succeeds")
}

// TestMovnSucceeds is a paid mutator transaction binding the contract method 0xe1085fac.
//
// Solidity: function test_movn_succeeds() returns()
func (_MIPS *MIPSSession) TestMovnSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMovnSucceeds(&_MIPS.TransactOpts)
}

// TestMovnSucceeds is a paid mutator transaction binding the contract method 0xe1085fac.
//
// Solidity: function test_movn_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMovnSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMovnSucceeds(&_MIPS.TransactOpts)
}

// TestMovzSucceeds is a paid mutator transaction binding the contract method 0x2aeed776.
//
// Solidity: function test_movz_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMovzSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_movz_succeeds")
}

// TestMovzSucceeds is a paid mutator transaction binding the contract method 0x2aeed776.
//
// Solidity: function test_movz_succeeds() returns()
func (_MIPS *MIPSSession) TestMovzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMovzSucceeds(&_MIPS.TransactOpts)
}

// TestMovzSucceeds is a paid mutator transaction binding the contract method 0x2aeed776.
//
// Solidity: function test_movz_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMovzSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMovzSucceeds(&_MIPS.TransactOpts)
}

// TestMthiSucceeds is a paid mutator transaction binding the contract method 0xa8f7965b.
//
// Solidity: function test_mthi_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMthiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mthi_succeeds")
}

// TestMthiSucceeds is a paid mutator transaction binding the contract method 0xa8f7965b.
//
// Solidity: function test_mthi_succeeds() returns()
func (_MIPS *MIPSSession) TestMthiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMthiSucceeds(&_MIPS.TransactOpts)
}

// TestMthiSucceeds is a paid mutator transaction binding the contract method 0xa8f7965b.
//
// Solidity: function test_mthi_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMthiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMthiSucceeds(&_MIPS.TransactOpts)
}

// TestMtloSucceeds is a paid mutator transaction binding the contract method 0x23d3769b.
//
// Solidity: function test_mtlo_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMtloSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mtlo_succeeds")
}

// TestMtloSucceeds is a paid mutator transaction binding the contract method 0x23d3769b.
//
// Solidity: function test_mtlo_succeeds() returns()
func (_MIPS *MIPSSession) TestMtloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMtloSucceeds(&_MIPS.TransactOpts)
}

// TestMtloSucceeds is a paid mutator transaction binding the contract method 0x23d3769b.
//
// Solidity: function test_mtlo_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMtloSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMtloSucceeds(&_MIPS.TransactOpts)
}

// TestMulSucceeds is a paid mutator transaction binding the contract method 0x41c57b5a.
//
// Solidity: function test_mul_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMulSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mul_succeeds")
}

// TestMulSucceeds is a paid mutator transaction binding the contract method 0x41c57b5a.
//
// Solidity: function test_mul_succeeds() returns()
func (_MIPS *MIPSSession) TestMulSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMulSucceeds(&_MIPS.TransactOpts)
}

// TestMulSucceeds is a paid mutator transaction binding the contract method 0x41c57b5a.
//
// Solidity: function test_mul_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMulSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMulSucceeds(&_MIPS.TransactOpts)
}

// TestMultSucceeds is a paid mutator transaction binding the contract method 0x68500360.
//
// Solidity: function test_mult_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMultSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_mult_succeeds")
}

// TestMultSucceeds is a paid mutator transaction binding the contract method 0x68500360.
//
// Solidity: function test_mult_succeeds() returns()
func (_MIPS *MIPSSession) TestMultSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMultSucceeds(&_MIPS.TransactOpts)
}

// TestMultSucceeds is a paid mutator transaction binding the contract method 0x68500360.
//
// Solidity: function test_mult_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMultSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMultSucceeds(&_MIPS.TransactOpts)
}

// TestMultuSucceeds is a paid mutator transaction binding the contract method 0xad10c169.
//
// Solidity: function test_multu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestMultuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_multu_succeeds")
}

// TestMultuSucceeds is a paid mutator transaction binding the contract method 0xad10c169.
//
// Solidity: function test_multu_succeeds() returns()
func (_MIPS *MIPSSession) TestMultuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMultuSucceeds(&_MIPS.TransactOpts)
}

// TestMultuSucceeds is a paid mutator transaction binding the contract method 0xad10c169.
//
// Solidity: function test_multu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestMultuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestMultuSucceeds(&_MIPS.TransactOpts)
}

// TestNorSucceeds is a paid mutator transaction binding the contract method 0xaab5e004.
//
// Solidity: function test_nor_succeeds() returns()
func (_MIPS *MIPSTransactor) TestNorSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_nor_succeeds")
}

// TestNorSucceeds is a paid mutator transaction binding the contract method 0xaab5e004.
//
// Solidity: function test_nor_succeeds() returns()
func (_MIPS *MIPSSession) TestNorSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestNorSucceeds(&_MIPS.TransactOpts)
}

// TestNorSucceeds is a paid mutator transaction binding the contract method 0xaab5e004.
//
// Solidity: function test_nor_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestNorSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestNorSucceeds(&_MIPS.TransactOpts)
}

// TestOrSucceeds is a paid mutator transaction binding the contract method 0x53a5c3d1.
//
// Solidity: function test_or_succeeds() returns()
func (_MIPS *MIPSTransactor) TestOrSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_or_succeeds")
}

// TestOrSucceeds is a paid mutator transaction binding the contract method 0x53a5c3d1.
//
// Solidity: function test_or_succeeds() returns()
func (_MIPS *MIPSSession) TestOrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestOrSucceeds(&_MIPS.TransactOpts)
}

// TestOrSucceeds is a paid mutator transaction binding the contract method 0x53a5c3d1.
//
// Solidity: function test_or_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestOrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestOrSucceeds(&_MIPS.TransactOpts)
}

// TestOriSucceeds is a paid mutator transaction binding the contract method 0x0f8c98c2.
//
// Solidity: function test_ori_succeeds() returns()
func (_MIPS *MIPSTransactor) TestOriSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_ori_succeeds")
}

// TestOriSucceeds is a paid mutator transaction binding the contract method 0x0f8c98c2.
//
// Solidity: function test_ori_succeeds() returns()
func (_MIPS *MIPSSession) TestOriSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestOriSucceeds(&_MIPS.TransactOpts)
}

// TestOriSucceeds is a paid mutator transaction binding the contract method 0x0f8c98c2.
//
// Solidity: function test_ori_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestOriSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestOriSucceeds(&_MIPS.TransactOpts)
}

// TestPreimageReadSucceeds is a paid mutator transaction binding the contract method 0xd1fa78fb.
//
// Solidity: function test_preimage_read_succeeds() returns()
func (_MIPS *MIPSTransactor) TestPreimageReadSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_preimage_read_succeeds")
}

// TestPreimageReadSucceeds is a paid mutator transaction binding the contract method 0xd1fa78fb.
//
// Solidity: function test_preimage_read_succeeds() returns()
func (_MIPS *MIPSSession) TestPreimageReadSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPreimageReadSucceeds(&_MIPS.TransactOpts)
}

// TestPreimageReadSucceeds is a paid mutator transaction binding the contract method 0xd1fa78fb.
//
// Solidity: function test_preimage_read_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestPreimageReadSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPreimageReadSucceeds(&_MIPS.TransactOpts)
}

// TestPreimageWriteSucceeds is a paid mutator transaction binding the contract method 0xff6ba5e5.
//
// Solidity: function test_preimage_write_succeeds() returns()
func (_MIPS *MIPSTransactor) TestPreimageWriteSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_preimage_write_succeeds")
}

// TestPreimageWriteSucceeds is a paid mutator transaction binding the contract method 0xff6ba5e5.
//
// Solidity: function test_preimage_write_succeeds() returns()
func (_MIPS *MIPSSession) TestPreimageWriteSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPreimageWriteSucceeds(&_MIPS.TransactOpts)
}

// TestPreimageWriteSucceeds is a paid mutator transaction binding the contract method 0xff6ba5e5.
//
// Solidity: function test_preimage_write_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestPreimageWriteSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPreimageWriteSucceeds(&_MIPS.TransactOpts)
}

// TestPrestateExitedSucceeds is a paid mutator transaction binding the contract method 0x7444782c.
//
// Solidity: function test_prestate_exited_succeeds() returns()
func (_MIPS *MIPSTransactor) TestPrestateExitedSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_prestate_exited_succeeds")
}

// TestPrestateExitedSucceeds is a paid mutator transaction binding the contract method 0x7444782c.
//
// Solidity: function test_prestate_exited_succeeds() returns()
func (_MIPS *MIPSSession) TestPrestateExitedSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPrestateExitedSucceeds(&_MIPS.TransactOpts)
}

// TestPrestateExitedSucceeds is a paid mutator transaction binding the contract method 0x7444782c.
//
// Solidity: function test_prestate_exited_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestPrestateExitedSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestPrestateExitedSucceeds(&_MIPS.TransactOpts)
}

// TestSbSucceeds is a paid mutator transaction binding the contract method 0x12bbd1b1.
//
// Solidity: function test_sb_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSbSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sb_succeeds")
}

// TestSbSucceeds is a paid mutator transaction binding the contract method 0x12bbd1b1.
//
// Solidity: function test_sb_succeeds() returns()
func (_MIPS *MIPSSession) TestSbSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSbSucceeds(&_MIPS.TransactOpts)
}

// TestSbSucceeds is a paid mutator transaction binding the contract method 0x12bbd1b1.
//
// Solidity: function test_sb_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSbSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSbSucceeds(&_MIPS.TransactOpts)
}

// TestScSucceeds is a paid mutator transaction binding the contract method 0x0e81274b.
//
// Solidity: function test_sc_succeeds() returns()
func (_MIPS *MIPSTransactor) TestScSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sc_succeeds")
}

// TestScSucceeds is a paid mutator transaction binding the contract method 0x0e81274b.
//
// Solidity: function test_sc_succeeds() returns()
func (_MIPS *MIPSSession) TestScSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestScSucceeds(&_MIPS.TransactOpts)
}

// TestScSucceeds is a paid mutator transaction binding the contract method 0x0e81274b.
//
// Solidity: function test_sc_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestScSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestScSucceeds(&_MIPS.TransactOpts)
}

// TestShSucceeds is a paid mutator transaction binding the contract method 0x822b2e43.
//
// Solidity: function test_sh_succeeds() returns()
func (_MIPS *MIPSTransactor) TestShSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sh_succeeds")
}

// TestShSucceeds is a paid mutator transaction binding the contract method 0x822b2e43.
//
// Solidity: function test_sh_succeeds() returns()
func (_MIPS *MIPSSession) TestShSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestShSucceeds(&_MIPS.TransactOpts)
}

// TestShSucceeds is a paid mutator transaction binding the contract method 0x822b2e43.
//
// Solidity: function test_sh_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestShSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestShSucceeds(&_MIPS.TransactOpts)
}

// TestSllSucceeds is a paid mutator transaction binding the contract method 0x2fbcf073.
//
// Solidity: function test_sll_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSllSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sll_succeeds")
}

// TestSllSucceeds is a paid mutator transaction binding the contract method 0x2fbcf073.
//
// Solidity: function test_sll_succeeds() returns()
func (_MIPS *MIPSSession) TestSllSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSllSucceeds(&_MIPS.TransactOpts)
}

// TestSllSucceeds is a paid mutator transaction binding the contract method 0x2fbcf073.
//
// Solidity: function test_sll_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSllSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSllSucceeds(&_MIPS.TransactOpts)
}

// TestSllvSucceeds is a paid mutator transaction binding the contract method 0x86d7b503.
//
// Solidity: function test_sllv_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSllvSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sllv_succeeds")
}

// TestSllvSucceeds is a paid mutator transaction binding the contract method 0x86d7b503.
//
// Solidity: function test_sllv_succeeds() returns()
func (_MIPS *MIPSSession) TestSllvSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSllvSucceeds(&_MIPS.TransactOpts)
}

// TestSllvSucceeds is a paid mutator transaction binding the contract method 0x86d7b503.
//
// Solidity: function test_sllv_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSllvSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSllvSucceeds(&_MIPS.TransactOpts)
}

// TestSltSucceeds is a paid mutator transaction binding the contract method 0x91413dfb.
//
// Solidity: function test_slt_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSltSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_slt_succeeds")
}

// TestSltSucceeds is a paid mutator transaction binding the contract method 0x91413dfb.
//
// Solidity: function test_slt_succeeds() returns()
func (_MIPS *MIPSSession) TestSltSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSltSucceeds(&_MIPS.TransactOpts)
}

// TestSltSucceeds is a paid mutator transaction binding the contract method 0x91413dfb.
//
// Solidity: function test_slt_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSltSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSltSucceeds(&_MIPS.TransactOpts)
}

// TestSltuSucceeds is a paid mutator transaction binding the contract method 0xe4232355.
//
// Solidity: function test_sltu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSltuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sltu_succeeds")
}

// TestSltuSucceeds is a paid mutator transaction binding the contract method 0xe4232355.
//
// Solidity: function test_sltu_succeeds() returns()
func (_MIPS *MIPSSession) TestSltuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSltuSucceeds(&_MIPS.TransactOpts)
}

// TestSltuSucceeds is a paid mutator transaction binding the contract method 0xe4232355.
//
// Solidity: function test_sltu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSltuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSltuSucceeds(&_MIPS.TransactOpts)
}

// TestSraSucceeds is a paid mutator transaction binding the contract method 0x39ef3b25.
//
// Solidity: function test_sra_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSraSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sra_succeeds")
}

// TestSraSucceeds is a paid mutator transaction binding the contract method 0x39ef3b25.
//
// Solidity: function test_sra_succeeds() returns()
func (_MIPS *MIPSSession) TestSraSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSraSucceeds(&_MIPS.TransactOpts)
}

// TestSraSucceeds is a paid mutator transaction binding the contract method 0x39ef3b25.
//
// Solidity: function test_sra_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSraSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSraSucceeds(&_MIPS.TransactOpts)
}

// TestSravSucceeds is a paid mutator transaction binding the contract method 0x25b14341.
//
// Solidity: function test_srav_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSravSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_srav_succeeds")
}

// TestSravSucceeds is a paid mutator transaction binding the contract method 0x25b14341.
//
// Solidity: function test_srav_succeeds() returns()
func (_MIPS *MIPSSession) TestSravSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSravSucceeds(&_MIPS.TransactOpts)
}

// TestSravSucceeds is a paid mutator transaction binding the contract method 0x25b14341.
//
// Solidity: function test_srav_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSravSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSravSucceeds(&_MIPS.TransactOpts)
}

// TestSrlSucceeds is a paid mutator transaction binding the contract method 0xe994e9b4.
//
// Solidity: function test_srl_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSrlSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_srl_succeeds")
}

// TestSrlSucceeds is a paid mutator transaction binding the contract method 0xe994e9b4.
//
// Solidity: function test_srl_succeeds() returns()
func (_MIPS *MIPSSession) TestSrlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSrlSucceeds(&_MIPS.TransactOpts)
}

// TestSrlSucceeds is a paid mutator transaction binding the contract method 0xe994e9b4.
//
// Solidity: function test_srl_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSrlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSrlSucceeds(&_MIPS.TransactOpts)
}

// TestSrlvSucceeds is a paid mutator transaction binding the contract method 0x21f830af.
//
// Solidity: function test_srlv_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSrlvSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_srlv_succeeds")
}

// TestSrlvSucceeds is a paid mutator transaction binding the contract method 0x21f830af.
//
// Solidity: function test_srlv_succeeds() returns()
func (_MIPS *MIPSSession) TestSrlvSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSrlvSucceeds(&_MIPS.TransactOpts)
}

// TestSrlvSucceeds is a paid mutator transaction binding the contract method 0x21f830af.
//
// Solidity: function test_srlv_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSrlvSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSrlvSucceeds(&_MIPS.TransactOpts)
}

// TestStepAbiSucceeds is a paid mutator transaction binding the contract method 0xe006ec0c.
//
// Solidity: function test_step_abi_succeeds() returns()
func (_MIPS *MIPSTransactor) TestStepAbiSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_step_abi_succeeds")
}

// TestStepAbiSucceeds is a paid mutator transaction binding the contract method 0xe006ec0c.
//
// Solidity: function test_step_abi_succeeds() returns()
func (_MIPS *MIPSSession) TestStepAbiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestStepAbiSucceeds(&_MIPS.TransactOpts)
}

// TestStepAbiSucceeds is a paid mutator transaction binding the contract method 0xe006ec0c.
//
// Solidity: function test_step_abi_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestStepAbiSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestStepAbiSucceeds(&_MIPS.TransactOpts)
}

// TestSubSucceeds is a paid mutator transaction binding the contract method 0x9cdd90cc.
//
// Solidity: function test_sub_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSubSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sub_succeeds")
}

// TestSubSucceeds is a paid mutator transaction binding the contract method 0x9cdd90cc.
//
// Solidity: function test_sub_succeeds() returns()
func (_MIPS *MIPSSession) TestSubSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSubSucceeds(&_MIPS.TransactOpts)
}

// TestSubSucceeds is a paid mutator transaction binding the contract method 0x9cdd90cc.
//
// Solidity: function test_sub_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSubSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSubSucceeds(&_MIPS.TransactOpts)
}

// TestSubuSucceeds is a paid mutator transaction binding the contract method 0x459f8050.
//
// Solidity: function test_subu_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSubuSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_subu_succeeds")
}

// TestSubuSucceeds is a paid mutator transaction binding the contract method 0x459f8050.
//
// Solidity: function test_subu_succeeds() returns()
func (_MIPS *MIPSSession) TestSubuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSubuSucceeds(&_MIPS.TransactOpts)
}

// TestSubuSucceeds is a paid mutator transaction binding the contract method 0x459f8050.
//
// Solidity: function test_subu_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSubuSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSubuSucceeds(&_MIPS.TransactOpts)
}

// TestSwSucceeds is a paid mutator transaction binding the contract method 0x64c4dd8d.
//
// Solidity: function test_sw_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSwSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_sw_succeeds")
}

// TestSwSucceeds is a paid mutator transaction binding the contract method 0x64c4dd8d.
//
// Solidity: function test_sw_succeeds() returns()
func (_MIPS *MIPSSession) TestSwSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwSucceeds(&_MIPS.TransactOpts)
}

// TestSwSucceeds is a paid mutator transaction binding the contract method 0x64c4dd8d.
//
// Solidity: function test_sw_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSwSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwSucceeds(&_MIPS.TransactOpts)
}

// TestSwlSucceeds is a paid mutator transaction binding the contract method 0x7939fe59.
//
// Solidity: function test_swl_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSwlSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_swl_succeeds")
}

// TestSwlSucceeds is a paid mutator transaction binding the contract method 0x7939fe59.
//
// Solidity: function test_swl_succeeds() returns()
func (_MIPS *MIPSSession) TestSwlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwlSucceeds(&_MIPS.TransactOpts)
}

// TestSwlSucceeds is a paid mutator transaction binding the contract method 0x7939fe59.
//
// Solidity: function test_swl_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSwlSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwlSucceeds(&_MIPS.TransactOpts)
}

// TestSwrSucceeds is a paid mutator transaction binding the contract method 0x7d5ed3f4.
//
// Solidity: function test_swr_succeeds() returns()
func (_MIPS *MIPSTransactor) TestSwrSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_swr_succeeds")
}

// TestSwrSucceeds is a paid mutator transaction binding the contract method 0x7d5ed3f4.
//
// Solidity: function test_swr_succeeds() returns()
func (_MIPS *MIPSSession) TestSwrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwrSucceeds(&_MIPS.TransactOpts)
}

// TestSwrSucceeds is a paid mutator transaction binding the contract method 0x7d5ed3f4.
//
// Solidity: function test_swr_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestSwrSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestSwrSucceeds(&_MIPS.TransactOpts)
}

// TestXorSucceeds is a paid mutator transaction binding the contract method 0xf0b0d1be.
//
// Solidity: function test_xor_succeeds() returns()
func (_MIPS *MIPSTransactor) TestXorSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_xor_succeeds")
}

// TestXorSucceeds is a paid mutator transaction binding the contract method 0xf0b0d1be.
//
// Solidity: function test_xor_succeeds() returns()
func (_MIPS *MIPSSession) TestXorSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestXorSucceeds(&_MIPS.TransactOpts)
}

// TestXorSucceeds is a paid mutator transaction binding the contract method 0xf0b0d1be.
//
// Solidity: function test_xor_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestXorSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestXorSucceeds(&_MIPS.TransactOpts)
}

// TestXoriSucceeds is a paid mutator transaction binding the contract method 0x9af91a1e.
//
// Solidity: function test_xori_succeeds() returns()
func (_MIPS *MIPSTransactor) TestXoriSucceeds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MIPS.contract.Transact(opts, "test_xori_succeeds")
}

// TestXoriSucceeds is a paid mutator transaction binding the contract method 0x9af91a1e.
//
// Solidity: function test_xori_succeeds() returns()
func (_MIPS *MIPSSession) TestXoriSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestXoriSucceeds(&_MIPS.TransactOpts)
}

// TestXoriSucceeds is a paid mutator transaction binding the contract method 0x9af91a1e.
//
// Solidity: function test_xori_succeeds() returns()
func (_MIPS *MIPSTransactorSession) TestXoriSucceeds() (*types.Transaction, error) {
	return _MIPS.Contract.TestXoriSucceeds(&_MIPS.TransactOpts)
}

// MIPSOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MIPS contract.
type MIPSOwnershipTransferredIterator struct {
	Event *MIPSOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSOwnershipTransferred represents a OwnershipTransferred event raised by the MIPS contract.
type MIPSOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MIPS *MIPSFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MIPSOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MIPSOwnershipTransferredIterator{contract: _MIPS.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MIPS *MIPSFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MIPSOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSOwnershipTransferred)
				if err := _MIPS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MIPS *MIPSFilterer) ParseOwnershipTransferred(log types.Log) (*MIPSOwnershipTransferred, error) {
	event := new(MIPSOwnershipTransferred)
	if err := _MIPS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSTransactionDepositedIterator is returned from FilterTransactionDeposited and is used to iterate over the raw logs and unpacked data for TransactionDeposited events raised by the MIPS contract.
type MIPSTransactionDepositedIterator struct {
	Event *MIPSTransactionDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSTransactionDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSTransactionDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSTransactionDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSTransactionDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSTransactionDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSTransactionDeposited represents a TransactionDeposited event raised by the MIPS contract.
type MIPSTransactionDeposited struct {
	From       common.Address
	To         common.Address
	Version    *big.Int
	OpaqueData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionDeposited is a free log retrieval operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MIPS *MIPSFilterer) FilterTransactionDeposited(opts *bind.FilterOpts, from []common.Address, to []common.Address, version []*big.Int) (*MIPSTransactionDepositedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return &MIPSTransactionDepositedIterator{contract: _MIPS.contract, event: "TransactionDeposited", logs: logs, sub: sub}, nil
}

// WatchTransactionDeposited is a free log subscription operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MIPS *MIPSFilterer) WatchTransactionDeposited(opts *bind.WatchOpts, sink chan<- *MIPSTransactionDeposited, from []common.Address, to []common.Address, version []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSTransactionDeposited)
				if err := _MIPS.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionDeposited is a log parse operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MIPS *MIPSFilterer) ParseTransactionDeposited(log types.Log) (*MIPSTransactionDeposited, error) {
	event := new(MIPSTransactionDeposited)
	if err := _MIPS.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the MIPS contract.
type MIPSLogIterator struct {
	Event *MIPSLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLog represents a Log event raised by the MIPS contract.
type MIPSLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_MIPS *MIPSFilterer) FilterLog(opts *bind.FilterOpts) (*MIPSLogIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &MIPSLogIterator{contract: _MIPS.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_MIPS *MIPSFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *MIPSLog) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLog)
				if err := _MIPS.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_MIPS *MIPSFilterer) ParseLog(log types.Log) (*MIPSLog, error) {
	event := new(MIPSLog)
	if err := _MIPS.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the MIPS contract.
type MIPSLogAddressIterator struct {
	Event *MIPSLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogAddress represents a LogAddress event raised by the MIPS contract.
type MIPSLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_MIPS *MIPSFilterer) FilterLogAddress(opts *bind.FilterOpts) (*MIPSLogAddressIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &MIPSLogAddressIterator{contract: _MIPS.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_MIPS *MIPSFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *MIPSLogAddress) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogAddress)
				if err := _MIPS.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_MIPS *MIPSFilterer) ParseLogAddress(log types.Log) (*MIPSLogAddress, error) {
	event := new(MIPSLogAddress)
	if err := _MIPS.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the MIPS contract.
type MIPSLogArrayIterator struct {
	Event *MIPSLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogArray represents a LogArray event raised by the MIPS contract.
type MIPSLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_MIPS *MIPSFilterer) FilterLogArray(opts *bind.FilterOpts) (*MIPSLogArrayIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &MIPSLogArrayIterator{contract: _MIPS.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_MIPS *MIPSFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *MIPSLogArray) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogArray)
				if err := _MIPS.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_MIPS *MIPSFilterer) ParseLogArray(log types.Log) (*MIPSLogArray, error) {
	event := new(MIPSLogArray)
	if err := _MIPS.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the MIPS contract.
type MIPSLogArray0Iterator struct {
	Event *MIPSLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogArray0 represents a LogArray0 event raised by the MIPS contract.
type MIPSLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_MIPS *MIPSFilterer) FilterLogArray0(opts *bind.FilterOpts) (*MIPSLogArray0Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &MIPSLogArray0Iterator{contract: _MIPS.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_MIPS *MIPSFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *MIPSLogArray0) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogArray0)
				if err := _MIPS.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_MIPS *MIPSFilterer) ParseLogArray0(log types.Log) (*MIPSLogArray0, error) {
	event := new(MIPSLogArray0)
	if err := _MIPS.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the MIPS contract.
type MIPSLogArray1Iterator struct {
	Event *MIPSLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogArray1 represents a LogArray1 event raised by the MIPS contract.
type MIPSLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_MIPS *MIPSFilterer) FilterLogArray1(opts *bind.FilterOpts) (*MIPSLogArray1Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &MIPSLogArray1Iterator{contract: _MIPS.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_MIPS *MIPSFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *MIPSLogArray1) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogArray1)
				if err := _MIPS.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_MIPS *MIPSFilterer) ParseLogArray1(log types.Log) (*MIPSLogArray1, error) {
	event := new(MIPSLogArray1)
	if err := _MIPS.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the MIPS contract.
type MIPSLogBytesIterator struct {
	Event *MIPSLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogBytes represents a LogBytes event raised by the MIPS contract.
type MIPSLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_MIPS *MIPSFilterer) FilterLogBytes(opts *bind.FilterOpts) (*MIPSLogBytesIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &MIPSLogBytesIterator{contract: _MIPS.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_MIPS *MIPSFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *MIPSLogBytes) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogBytes)
				if err := _MIPS.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_MIPS *MIPSFilterer) ParseLogBytes(log types.Log) (*MIPSLogBytes, error) {
	event := new(MIPSLogBytes)
	if err := _MIPS.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the MIPS contract.
type MIPSLogBytes32Iterator struct {
	Event *MIPSLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogBytes32 represents a LogBytes32 event raised by the MIPS contract.
type MIPSLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_MIPS *MIPSFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*MIPSLogBytes32Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &MIPSLogBytes32Iterator{contract: _MIPS.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_MIPS *MIPSFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *MIPSLogBytes32) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogBytes32)
				if err := _MIPS.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_MIPS *MIPSFilterer) ParseLogBytes32(log types.Log) (*MIPSLogBytes32, error) {
	event := new(MIPSLogBytes32)
	if err := _MIPS.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the MIPS contract.
type MIPSLogIntIterator struct {
	Event *MIPSLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogInt represents a LogInt event raised by the MIPS contract.
type MIPSLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_MIPS *MIPSFilterer) FilterLogInt(opts *bind.FilterOpts) (*MIPSLogIntIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &MIPSLogIntIterator{contract: _MIPS.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_MIPS *MIPSFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *MIPSLogInt) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogInt)
				if err := _MIPS.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_MIPS *MIPSFilterer) ParseLogInt(log types.Log) (*MIPSLogInt, error) {
	event := new(MIPSLogInt)
	if err := _MIPS.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the MIPS contract.
type MIPSLogNamedAddressIterator struct {
	Event *MIPSLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedAddress represents a LogNamedAddress event raised by the MIPS contract.
type MIPSLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_MIPS *MIPSFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*MIPSLogNamedAddressIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedAddressIterator{contract: _MIPS.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_MIPS *MIPSFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedAddress)
				if err := _MIPS.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_MIPS *MIPSFilterer) ParseLogNamedAddress(log types.Log) (*MIPSLogNamedAddress, error) {
	event := new(MIPSLogNamedAddress)
	if err := _MIPS.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the MIPS contract.
type MIPSLogNamedArrayIterator struct {
	Event *MIPSLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedArray represents a LogNamedArray event raised by the MIPS contract.
type MIPSLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_MIPS *MIPSFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*MIPSLogNamedArrayIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedArrayIterator{contract: _MIPS.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_MIPS *MIPSFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedArray)
				if err := _MIPS.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_MIPS *MIPSFilterer) ParseLogNamedArray(log types.Log) (*MIPSLogNamedArray, error) {
	event := new(MIPSLogNamedArray)
	if err := _MIPS.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the MIPS contract.
type MIPSLogNamedArray0Iterator struct {
	Event *MIPSLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedArray0 represents a LogNamedArray0 event raised by the MIPS contract.
type MIPSLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_MIPS *MIPSFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*MIPSLogNamedArray0Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedArray0Iterator{contract: _MIPS.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_MIPS *MIPSFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedArray0)
				if err := _MIPS.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_MIPS *MIPSFilterer) ParseLogNamedArray0(log types.Log) (*MIPSLogNamedArray0, error) {
	event := new(MIPSLogNamedArray0)
	if err := _MIPS.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the MIPS contract.
type MIPSLogNamedArray1Iterator struct {
	Event *MIPSLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedArray1 represents a LogNamedArray1 event raised by the MIPS contract.
type MIPSLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_MIPS *MIPSFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*MIPSLogNamedArray1Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedArray1Iterator{contract: _MIPS.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_MIPS *MIPSFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedArray1)
				if err := _MIPS.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_MIPS *MIPSFilterer) ParseLogNamedArray1(log types.Log) (*MIPSLogNamedArray1, error) {
	event := new(MIPSLogNamedArray1)
	if err := _MIPS.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the MIPS contract.
type MIPSLogNamedBytesIterator struct {
	Event *MIPSLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedBytes represents a LogNamedBytes event raised by the MIPS contract.
type MIPSLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_MIPS *MIPSFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*MIPSLogNamedBytesIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedBytesIterator{contract: _MIPS.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_MIPS *MIPSFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedBytes)
				if err := _MIPS.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_MIPS *MIPSFilterer) ParseLogNamedBytes(log types.Log) (*MIPSLogNamedBytes, error) {
	event := new(MIPSLogNamedBytes)
	if err := _MIPS.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the MIPS contract.
type MIPSLogNamedBytes32Iterator struct {
	Event *MIPSLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedBytes32 represents a LogNamedBytes32 event raised by the MIPS contract.
type MIPSLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_MIPS *MIPSFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*MIPSLogNamedBytes32Iterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedBytes32Iterator{contract: _MIPS.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_MIPS *MIPSFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedBytes32)
				if err := _MIPS.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_MIPS *MIPSFilterer) ParseLogNamedBytes32(log types.Log) (*MIPSLogNamedBytes32, error) {
	event := new(MIPSLogNamedBytes32)
	if err := _MIPS.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the MIPS contract.
type MIPSLogNamedDecimalIntIterator struct {
	Event *MIPSLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the MIPS contract.
type MIPSLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*MIPSLogNamedDecimalIntIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedDecimalIntIterator{contract: _MIPS.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedDecimalInt)
				if err := _MIPS.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) ParseLogNamedDecimalInt(log types.Log) (*MIPSLogNamedDecimalInt, error) {
	event := new(MIPSLogNamedDecimalInt)
	if err := _MIPS.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the MIPS contract.
type MIPSLogNamedDecimalUintIterator struct {
	Event *MIPSLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the MIPS contract.
type MIPSLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*MIPSLogNamedDecimalUintIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedDecimalUintIterator{contract: _MIPS.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedDecimalUint)
				if err := _MIPS.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_MIPS *MIPSFilterer) ParseLogNamedDecimalUint(log types.Log) (*MIPSLogNamedDecimalUint, error) {
	event := new(MIPSLogNamedDecimalUint)
	if err := _MIPS.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the MIPS contract.
type MIPSLogNamedIntIterator struct {
	Event *MIPSLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedInt represents a LogNamedInt event raised by the MIPS contract.
type MIPSLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_MIPS *MIPSFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*MIPSLogNamedIntIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedIntIterator{contract: _MIPS.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_MIPS *MIPSFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedInt)
				if err := _MIPS.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_MIPS *MIPSFilterer) ParseLogNamedInt(log types.Log) (*MIPSLogNamedInt, error) {
	event := new(MIPSLogNamedInt)
	if err := _MIPS.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the MIPS contract.
type MIPSLogNamedStringIterator struct {
	Event *MIPSLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedString represents a LogNamedString event raised by the MIPS contract.
type MIPSLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_MIPS *MIPSFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*MIPSLogNamedStringIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedStringIterator{contract: _MIPS.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_MIPS *MIPSFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedString) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedString)
				if err := _MIPS.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_MIPS *MIPSFilterer) ParseLogNamedString(log types.Log) (*MIPSLogNamedString, error) {
	event := new(MIPSLogNamedString)
	if err := _MIPS.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the MIPS contract.
type MIPSLogNamedUintIterator struct {
	Event *MIPSLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogNamedUint represents a LogNamedUint event raised by the MIPS contract.
type MIPSLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_MIPS *MIPSFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*MIPSLogNamedUintIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &MIPSLogNamedUintIterator{contract: _MIPS.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_MIPS *MIPSFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *MIPSLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogNamedUint)
				if err := _MIPS.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_MIPS *MIPSFilterer) ParseLogNamedUint(log types.Log) (*MIPSLogNamedUint, error) {
	event := new(MIPSLogNamedUint)
	if err := _MIPS.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the MIPS contract.
type MIPSLogStringIterator struct {
	Event *MIPSLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogString represents a LogString event raised by the MIPS contract.
type MIPSLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_MIPS *MIPSFilterer) FilterLogString(opts *bind.FilterOpts) (*MIPSLogStringIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &MIPSLogStringIterator{contract: _MIPS.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_MIPS *MIPSFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *MIPSLogString) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogString)
				if err := _MIPS.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_MIPS *MIPSFilterer) ParseLogString(log types.Log) (*MIPSLogString, error) {
	event := new(MIPSLogString)
	if err := _MIPS.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the MIPS contract.
type MIPSLogUintIterator struct {
	Event *MIPSLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogUint represents a LogUint event raised by the MIPS contract.
type MIPSLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_MIPS *MIPSFilterer) FilterLogUint(opts *bind.FilterOpts) (*MIPSLogUintIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &MIPSLogUintIterator{contract: _MIPS.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_MIPS *MIPSFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *MIPSLogUint) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogUint)
				if err := _MIPS.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_MIPS *MIPSFilterer) ParseLogUint(log types.Log) (*MIPSLogUint, error) {
	event := new(MIPSLogUint)
	if err := _MIPS.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MIPSLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the MIPS contract.
type MIPSLogsIterator struct {
	Event *MIPSLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MIPSLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MIPSLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MIPSLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MIPSLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MIPSLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MIPSLogs represents a Logs event raised by the MIPS contract.
type MIPSLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_MIPS *MIPSFilterer) FilterLogs(opts *bind.FilterOpts) (*MIPSLogsIterator, error) {

	logs, sub, err := _MIPS.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &MIPSLogsIterator{contract: _MIPS.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_MIPS *MIPSFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *MIPSLogs) (event.Subscription, error) {

	logs, sub, err := _MIPS.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MIPSLogs)
				if err := _MIPS.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_MIPS *MIPSFilterer) ParseLogs(log types.Log) (*MIPSLogs, error) {
	event := new(MIPSLogs)
	if err := _MIPS.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
